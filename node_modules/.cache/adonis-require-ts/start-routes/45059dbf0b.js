"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.group(() => {
    Route_1.default.post('address/:type', 'AddressesController.create');
    Route_1.default.get('addresses', 'AddressesController.index');
    Route_1.default.get('address/:type', 'AddressesController.getById');
    Route_1.default.delete('address/:type', 'AddressesController.delete');
    Route_1.default.put('address/:type', 'AddressesController.update');
}).middleware('auth');
Route_1.default.group(() => {
    Route_1.default.post('creditCard', 'CreditCardsController.create');
    Route_1.default.get('creditCards', 'CreditCardsController.index');
    Route_1.default.get('creditCard', 'CreditCardsController.getById');
    Route_1.default.delete('creditCard', 'CreditCardsController.delete');
    Route_1.default.put('creditCard', 'CreditCardsController.update');
}).middleware('auth');
Route_1.default.group(() => {
    Route_1.default.get('users', 'UserController.index');
    Route_1.default.get('user', 'UserController.getById');
    Route_1.default.delete('user', 'UserController.delete');
    Route_1.default.put('user', 'UserController.update');
    Route_1.default.put('user/support', 'UserController.updateSponsor');
}).middleware('auth');
Route_1.default.group(() => {
    Route_1.default.post('user/client', 'UserController.createClient');
    Route_1.default.get('restorers', 'RestorersController.index');
    Route_1.default.post('user/delivery', 'UserController.createDelivery');
    Route_1.default.post('user/restorer', 'UserController.createRestorer');
    Route_1.default.get('restorers', 'RestorersController.index');
});
Route_1.default.group(() => {
    Route_1.default.post('restorer', 'RestorersController.createClient');
    Route_1.default.get('restorer', 'RestorersController.getById');
    Route_1.default.delete('restorer', 'RestorersController.delete');
    Route_1.default.put('restorer', 'RestorersController.update');
}).middleware('auth');
Route_1.default.get('', () => {
    return '';
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0ZBQTBDO0FBRzFDLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRSxFQUFFO0lBQ1osZUFBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQTtJQUN6RCxlQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQ2xELGVBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLDZCQUE2QixDQUFDLENBQUE7SUFDekQsZUFBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUMsNEJBQTRCLENBQUMsQ0FBQTtJQUMxRCxlQUFLLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBQyw0QkFBNEIsQ0FBQyxDQUFBO0FBQzNELENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUtyQixlQUFLLENBQUMsS0FBSyxDQUFDLEdBQUUsRUFBRTtJQUNaLGVBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLDhCQUE4QixDQUFDLENBQUE7SUFDeEQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsNkJBQTZCLENBQUMsQ0FBQTtJQUN0RCxlQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO0lBQ3hELGVBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFDLDhCQUE4QixDQUFDLENBQUE7SUFDekQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUMsOEJBQThCLENBQUMsQ0FBQTtBQUMxRCxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7QUFHckIsZUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFFLEVBQUU7SUFDWixlQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBQyxzQkFBc0IsQ0FBQyxDQUFBO0lBQ3pDLGVBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLHdCQUF3QixDQUFDLENBQUE7SUFDM0MsZUFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUMsdUJBQXVCLENBQUMsQ0FBQTtJQUM1QyxlQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyx1QkFBdUIsQ0FBQyxDQUFBO0lBQ3pDLGVBQUssQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFDLDhCQUE4QixDQUFDLENBQUE7QUFDNUQsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRXJCLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRSxFQUFFO0lBQ1osZUFBSyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsNkJBQTZCLENBQUMsQ0FBQTtJQUN4RCxlQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQ2xELGVBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLCtCQUErQixDQUFDLENBQUE7SUFDNUQsZUFBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsK0JBQStCLENBQUMsQ0FBQTtJQUM1RCxlQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQywyQkFBMkIsQ0FBQyxDQUFBO0FBQ3RELENBQUMsQ0FBQyxDQUFBO0FBSUYsZUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFFLEVBQUU7SUFDWixlQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFBO0lBQzFELGVBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLDZCQUE2QixDQUFDLENBQUE7SUFDcEQsZUFBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUMsNEJBQTRCLENBQUMsQ0FBQTtJQUNyRCxlQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBQyw0QkFBNEIsQ0FBQyxDQUFBO0FBQ3RELENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQU1yQixlQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFFLEVBQUU7SUFDZCxPQUFPLEVBQUUsQ0FBQTtBQUNiLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJvdXRlIGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvUm91dGUnXG5cbi8qIEdyb3VwZSBkZSByb3V0ZSBwb3VyIGxhIG1hbmlwdWxhdGlvbiBkZXMgYWRyZXNzZXMgKi9cblJvdXRlLmdyb3VwKCgpPT57XG4gICAgUm91dGUucG9zdCgnYWRkcmVzcy86dHlwZScsICdBZGRyZXNzZXNDb250cm9sbGVyLmNyZWF0ZScpXG4gICAgUm91dGUuZ2V0KCdhZGRyZXNzZXMnLCdBZGRyZXNzZXNDb250cm9sbGVyLmluZGV4JylcbiAgICBSb3V0ZS5nZXQoJ2FkZHJlc3MvOnR5cGUnLCAnQWRkcmVzc2VzQ29udHJvbGxlci5nZXRCeUlkJylcbiAgICBSb3V0ZS5kZWxldGUoJ2FkZHJlc3MvOnR5cGUnLCdBZGRyZXNzZXNDb250cm9sbGVyLmRlbGV0ZScpXG4gICAgUm91dGUucHV0KCdhZGRyZXNzLzp0eXBlJywnQWRkcmVzc2VzQ29udHJvbGxlci51cGRhdGUnKVxufSkubWlkZGxld2FyZSgnYXV0aCcpXG5cblxuXG4vKiBHcm91cGUgZGUgcm91dGUgcG91ciBsYSBtYW5pcHVsYXRpb24gZGVzIG1veWVucyBkZSBwYWllbWVudHMgKi9cblJvdXRlLmdyb3VwKCgpPT57XG4gICAgUm91dGUucG9zdCgnY3JlZGl0Q2FyZCcsICdDcmVkaXRDYXJkc0NvbnRyb2xsZXIuY3JlYXRlJylcbiAgICBSb3V0ZS5nZXQoJ2NyZWRpdENhcmRzJywnQ3JlZGl0Q2FyZHNDb250cm9sbGVyLmluZGV4JylcbiAgICBSb3V0ZS5nZXQoJ2NyZWRpdENhcmQnLCAnQ3JlZGl0Q2FyZHNDb250cm9sbGVyLmdldEJ5SWQnKVxuICAgIFJvdXRlLmRlbGV0ZSgnY3JlZGl0Q2FyZCcsJ0NyZWRpdENhcmRzQ29udHJvbGxlci5kZWxldGUnKVxuICAgIFJvdXRlLnB1dCgnY3JlZGl0Q2FyZCcsJ0NyZWRpdENhcmRzQ29udHJvbGxlci51cGRhdGUnKVxufSkubWlkZGxld2FyZSgnYXV0aCcpXG5cbi8qIEdyb3VwZSBkZSByb3V0ZSBwb3VyIGxhIG1hbmlwdWxhdGlvbiBkZXMgdXRpbGlzYXRldXJzICovXG5Sb3V0ZS5ncm91cCgoKT0+e1xuICAgIFJvdXRlLmdldCgndXNlcnMnLCdVc2VyQ29udHJvbGxlci5pbmRleCcpXG4gICAgUm91dGUuZ2V0KCd1c2VyJywgJ1VzZXJDb250cm9sbGVyLmdldEJ5SWQnKVxuICAgIFJvdXRlLmRlbGV0ZSgndXNlcicsJ1VzZXJDb250cm9sbGVyLmRlbGV0ZScpXG4gICAgUm91dGUucHV0KCd1c2VyJywnVXNlckNvbnRyb2xsZXIudXBkYXRlJylcbiAgICBSb3V0ZS5wdXQoJ3VzZXIvc3VwcG9ydCcsJ1VzZXJDb250cm9sbGVyLnVwZGF0ZVNwb25zb3InKVxufSkubWlkZGxld2FyZSgnYXV0aCcpXG5cblJvdXRlLmdyb3VwKCgpPT57XG4gICAgUm91dGUucG9zdCgndXNlci9jbGllbnQnLCAnVXNlckNvbnRyb2xsZXIuY3JlYXRlQ2xpZW50JylcbiAgICBSb3V0ZS5nZXQoJ3Jlc3RvcmVycycsJ1Jlc3RvcmVyc0NvbnRyb2xsZXIuaW5kZXgnKVxuICAgIFJvdXRlLnBvc3QoJ3VzZXIvZGVsaXZlcnknLCAnVXNlckNvbnRyb2xsZXIuY3JlYXRlRGVsaXZlcnknKVxuICAgIFJvdXRlLnBvc3QoJ3VzZXIvcmVzdG9yZXInLCAnVXNlckNvbnRyb2xsZXIuY3JlYXRlUmVzdG9yZXInKVxuICAgIFJvdXRlLmdldCgncmVzdG9yZXJzJywnUmVzdG9yZXJzQ29udHJvbGxlci5pbmRleCcpXG59KVxuXG5cbi8qIEdyb3VwZSBkZSByb3V0ZSBwb3VyIGxhIG1hbmlwdWxhdGlvbiBkZXMgcmVzdG9yZXIgKi9cblJvdXRlLmdyb3VwKCgpPT57XG4gICAgUm91dGUucG9zdCgncmVzdG9yZXInLCAnUmVzdG9yZXJzQ29udHJvbGxlci5jcmVhdGVDbGllbnQnKVxuICAgIFJvdXRlLmdldCgncmVzdG9yZXInLCAnUmVzdG9yZXJzQ29udHJvbGxlci5nZXRCeUlkJylcbiAgICBSb3V0ZS5kZWxldGUoJ3Jlc3RvcmVyJywnUmVzdG9yZXJzQ29udHJvbGxlci5kZWxldGUnKVxuICAgIFJvdXRlLnB1dCgncmVzdG9yZXInLCdSZXN0b3JlcnNDb250cm9sbGVyLnVwZGF0ZScpXG59KS5taWRkbGV3YXJlKCdhdXRoJylcblxuXG5cblxuXG5Sb3V0ZS5nZXQoJycsICgpPT57XG4gICAgcmV0dXJuICcnXG59KVxuXG4vKlxuUm91dGUucG9zdCgnc2lnbnVwJywgJ1VzZXJDb250cm9sbGVyLmNyZWF0ZScpXG5cblJvdXRlLnBvc3QoJ2xvZ2luJywnQXV0aENvbnRyb2xsZXIubG9naW4nKVxuXG5Sb3V0ZS5nZXQoJ3JlZnJlc2hfdG9rZW4nLCAnQXV0aENvbnRyb2xsZXIucmVmcmVzaF90b2tlbicpXG5cblJvdXRlLmdldCgnY2hlY2snLCAnQXV0aENvbnRyb2xsZXIuY2hlY2snKSovIl19
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.group(() => {
    Route_1.default.post('address/:type', 'AddressesController.create');
    Route_1.default.get('addresses', 'AddressesController.index');
    Route_1.default.get('address/:type', 'AddressesController.getById');
    Route_1.default.delete('address/:type', 'AddressesController.delete');
    Route_1.default.put('address/:type', 'AddressesController.update');
});
Route_1.default.group(() => {
    Route_1.default.post('creditCard', 'CreditCardsController.create');
    Route_1.default.get('creditCards', 'CreditCardsController.index');
    Route_1.default.get('creditCard', 'CreditCardsController.getById');
    Route_1.default.delete('creditCard', 'CreditCardsController.delete');
    Route_1.default.put('creditCard', 'CreditCardsController.update');
});
Route_1.default.group(() => {
    Route_1.default.post('user/client', 'UserController.createClient');
    Route_1.default.post('user/delivery', 'UserController.createDelivery');
    Route_1.default.post('user/restorer', 'UserController.createRestorer');
    Route_1.default.get('user', 'UserController.index');
    Route_1.default.get('user/:id', 'UserController.getById');
    Route_1.default.delete('user/:id', 'UserController.delete');
    Route_1.default.put('user/:id', 'UserController.update');
    Route_1.default.put('user/support/:id', 'UserController.updateSponsor');
});
Route_1.default.group(() => {
    Route_1.default.post('restorer', 'RestorersController.createClient');
    Route_1.default.get('restorers', 'RestorersController.index');
    Route_1.default.get('restorer', 'RestorersController.getById');
    Route_1.default.delete('restorer', 'RestorersController.delete');
    Route_1.default.put('restorer', 'RestorersController.update');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0ZBQTBDO0FBTTFDLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRSxFQUFFO0lBQ1osZUFBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQTtJQUN6RCxlQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQ2xELGVBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLDZCQUE2QixDQUFDLENBQUE7SUFDekQsZUFBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUMsNEJBQTRCLENBQUMsQ0FBQTtJQUMxRCxlQUFLLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBQyw0QkFBNEIsQ0FBQyxDQUFBO0FBQzNELENBQUMsQ0FBQyxDQUFBO0FBS0YsZUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFFLEVBQUU7SUFDWixlQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSw4QkFBOEIsQ0FBQyxDQUFBO0lBQ3hELGVBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFDLDZCQUE2QixDQUFDLENBQUE7SUFDdEQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsK0JBQStCLENBQUMsQ0FBQTtJQUN4RCxlQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBQyw4QkFBOEIsQ0FBQyxDQUFBO0lBQ3pELGVBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFDLDhCQUE4QixDQUFDLENBQUE7QUFDMUQsQ0FBQyxDQUFDLENBQUE7QUFHRixlQUFLLENBQUMsS0FBSyxDQUFDLEdBQUUsRUFBRTtJQUNaLGVBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLDZCQUE2QixDQUFDLENBQUE7SUFDeEQsZUFBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsK0JBQStCLENBQUMsQ0FBQTtJQUM1RCxlQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO0lBQzVELGVBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLHNCQUFzQixDQUFDLENBQUE7SUFDeEMsZUFBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsd0JBQXdCLENBQUMsQ0FBQTtJQUMvQyxlQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBQyx1QkFBdUIsQ0FBQyxDQUFBO0lBQ2hELGVBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLHVCQUF1QixDQUFDLENBQUE7SUFDN0MsZUFBSyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBQyw4QkFBOEIsQ0FBQyxDQUFBO0FBQ2hFLENBQUMsQ0FBQyxDQUFBO0FBSUYsZUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFFLEVBQUU7SUFDWixlQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFBO0lBQzFELGVBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLDJCQUEyQixDQUFDLENBQUE7SUFDbEQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsNkJBQTZCLENBQUMsQ0FBQTtJQUNwRCxlQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBQyw0QkFBNEIsQ0FBQyxDQUFBO0lBQ3JELGVBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLDRCQUE0QixDQUFDLENBQUE7QUFDdEQsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91dGUgZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9Sb3V0ZSdcclxuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nXHJcbmltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xyXG5cclxuXHJcbi8qIEdyb3VwZSBkZSByb3V0ZSBwb3VyIGxhIG1hbmlwdWxhdGlvbiBkZXMgYWRyZXNzZXMgKi9cclxuUm91dGUuZ3JvdXAoKCk9PntcclxuICAgIFJvdXRlLnBvc3QoJ2FkZHJlc3MvOnR5cGUnLCAnQWRkcmVzc2VzQ29udHJvbGxlci5jcmVhdGUnKVxyXG4gICAgUm91dGUuZ2V0KCdhZGRyZXNzZXMnLCdBZGRyZXNzZXNDb250cm9sbGVyLmluZGV4JylcclxuICAgIFJvdXRlLmdldCgnYWRkcmVzcy86dHlwZScsICdBZGRyZXNzZXNDb250cm9sbGVyLmdldEJ5SWQnKVxyXG4gICAgUm91dGUuZGVsZXRlKCdhZGRyZXNzLzp0eXBlJywnQWRkcmVzc2VzQ29udHJvbGxlci5kZWxldGUnKVxyXG4gICAgUm91dGUucHV0KCdhZGRyZXNzLzp0eXBlJywnQWRkcmVzc2VzQ29udHJvbGxlci51cGRhdGUnKVxyXG59KVxyXG5cclxuXHJcblxyXG4vKiBHcm91cGUgZGUgcm91dGUgcG91ciBsYSBtYW5pcHVsYXRpb24gZGVzIG1veWVucyBkZSBwYWllbWVudHMgKi9cclxuUm91dGUuZ3JvdXAoKCk9PntcclxuICAgIFJvdXRlLnBvc3QoJ2NyZWRpdENhcmQnLCAnQ3JlZGl0Q2FyZHNDb250cm9sbGVyLmNyZWF0ZScpXHJcbiAgICBSb3V0ZS5nZXQoJ2NyZWRpdENhcmRzJywnQ3JlZGl0Q2FyZHNDb250cm9sbGVyLmluZGV4JylcclxuICAgIFJvdXRlLmdldCgnY3JlZGl0Q2FyZCcsICdDcmVkaXRDYXJkc0NvbnRyb2xsZXIuZ2V0QnlJZCcpXHJcbiAgICBSb3V0ZS5kZWxldGUoJ2NyZWRpdENhcmQnLCdDcmVkaXRDYXJkc0NvbnRyb2xsZXIuZGVsZXRlJylcclxuICAgIFJvdXRlLnB1dCgnY3JlZGl0Q2FyZCcsJ0NyZWRpdENhcmRzQ29udHJvbGxlci51cGRhdGUnKVxyXG59KVxyXG5cclxuLyogR3JvdXBlIGRlIHJvdXRlIHBvdXIgbGEgbWFuaXB1bGF0aW9uIGRlcyB1dGlsaXNhdGV1cnMgKi9cclxuUm91dGUuZ3JvdXAoKCk9PntcclxuICAgIFJvdXRlLnBvc3QoJ3VzZXIvY2xpZW50JywgJ1VzZXJDb250cm9sbGVyLmNyZWF0ZUNsaWVudCcpXHJcbiAgICBSb3V0ZS5wb3N0KCd1c2VyL2RlbGl2ZXJ5JywgJ1VzZXJDb250cm9sbGVyLmNyZWF0ZURlbGl2ZXJ5JylcclxuICAgIFJvdXRlLnBvc3QoJ3VzZXIvcmVzdG9yZXInLCAnVXNlckNvbnRyb2xsZXIuY3JlYXRlUmVzdG9yZXInKVxyXG4gICAgUm91dGUuZ2V0KCd1c2VyJywnVXNlckNvbnRyb2xsZXIuaW5kZXgnKVxyXG4gICAgUm91dGUuZ2V0KCd1c2VyLzppZCcsICdVc2VyQ29udHJvbGxlci5nZXRCeUlkJylcclxuICAgIFJvdXRlLmRlbGV0ZSgndXNlci86aWQnLCdVc2VyQ29udHJvbGxlci5kZWxldGUnKVxyXG4gICAgUm91dGUucHV0KCd1c2VyLzppZCcsJ1VzZXJDb250cm9sbGVyLnVwZGF0ZScpXHJcbiAgICBSb3V0ZS5wdXQoJ3VzZXIvc3VwcG9ydC86aWQnLCdVc2VyQ29udHJvbGxlci51cGRhdGVTcG9uc29yJylcclxufSlcclxuXHJcblxyXG4vKiBHcm91cGUgZGUgcm91dGUgcG91ciBsYSBtYW5pcHVsYXRpb24gZGVzIHJlc3RvcmVyICovXHJcblJvdXRlLmdyb3VwKCgpPT57XHJcbiAgICBSb3V0ZS5wb3N0KCdyZXN0b3JlcicsICdSZXN0b3JlcnNDb250cm9sbGVyLmNyZWF0ZUNsaWVudCcpXHJcbiAgICBSb3V0ZS5nZXQoJ3Jlc3RvcmVycycsJ1Jlc3RvcmVyc0NvbnRyb2xsZXIuaW5kZXgnKVxyXG4gICAgUm91dGUuZ2V0KCdyZXN0b3JlcicsICdSZXN0b3JlcnNDb250cm9sbGVyLmdldEJ5SWQnKVxyXG4gICAgUm91dGUuZGVsZXRlKCdyZXN0b3JlcicsJ1Jlc3RvcmVyc0NvbnRyb2xsZXIuZGVsZXRlJylcclxuICAgIFJvdXRlLnB1dCgncmVzdG9yZXInLCdSZXN0b3JlcnNDb250cm9sbGVyLnVwZGF0ZScpXHJcbn0pXHJcblxyXG5cclxuXHJcblxyXG5cclxuLypSb3V0ZS5nZXQoJ3Rlc3QnLCAoKT0+e1xyXG4gICAgcmV0dXJuICdQQUdFIERFIFRFU1QnXHJcbn0pXHJcblxyXG5Sb3V0ZS5wb3N0KCdzaWdudXAnLCAnVXNlckNvbnRyb2xsZXIuY3JlYXRlJylcclxuXHJcblJvdXRlLnBvc3QoJ2xvZ2luJywnQXV0aENvbnRyb2xsZXIubG9naW4nKVxyXG5cclxuUm91dGUuZ2V0KCdyZWZyZXNoX3Rva2VuJywgJ0F1dGhDb250cm9sbGVyLnJlZnJlc2hfdG9rZW4nKVxyXG5cclxuUm91dGUuZ2V0KCdjaGVjaycsICdBdXRoQ29udHJvbGxlci5jaGVjaycpKi8iXX0=
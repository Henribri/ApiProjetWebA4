"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
Route_1.default.get('signup', async () => {
    return await User_1.default.create({ email: 'Henri', password: 'youpi' });
});
Route_1.default.post('login', async ({ auth, request, response }) => {
    const email = request.input('email');
    const password = request.input('password');
    try {
        const token = jsonwebtoken_1.default.sign({
            data: 'foobar'
        }, 'TOKEN_PRIVATE_KEY', { expiresIn: '30m' });
        const refresh_token = await auth.use('api').attempt(email, password, {
            expiresIn: '1days'
        });
        return { token, refresh_token };
    }
    catch {
        return response.badRequest('Invalid credentials');
    }
});
Route_1.default.get('refresh_token', async ({ auth, response }) => {
    try {
        const refreshToken = await auth.use('api').authenticate();
        if (refreshToken)
            return jsonwebtoken_1.default.sign({ data: 'foobar' }, 'TOKEN_PRIVATE_KEY', { expiresIn: '30m' });
    }
    catch {
        return response.badRequest('Invalid credentials');
    }
});
Route_1.default.get('check', async ({ request }) => {
    return jsonwebtoken_1.default.verify(request.input('token'), 'TOKEN_PRIVATE_KEY');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0Esb0ZBQTBDO0FBQzFDLGlGQUFrQztBQUVsQyxnRUFBOEI7QUFJOUIsZUFBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDN0IsT0FBTyxNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0FBQ2hFLENBQUMsQ0FBQyxDQUFBO0FBRUYsZUFBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFO0lBRXhELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDcEMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUMxQyxJQUFJO1FBR0YsTUFBTSxLQUFLLEdBQUksc0JBQUcsQ0FBQyxJQUFJLENBQUM7WUFDdEIsSUFBSSxFQUFFLFFBQVE7U0FDZixFQUFFLG1CQUFtQixFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFHOUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1lBQ25FLFNBQVMsRUFBQyxPQUFPO1NBQ2xCLENBQUMsQ0FBQTtRQUdGLE9BQU8sRUFBQyxLQUFLLEVBQUUsYUFBYSxFQUFDLENBQUE7S0FFOUI7SUFBQyxNQUFNO1FBQ04sT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUE7S0FDbEQ7QUFDSCxDQUFDLENBQUMsQ0FBQTtBQUVGLGVBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssRUFBQyxFQUFDLElBQUksRUFBRyxRQUFRLEVBQUMsRUFBQyxFQUFFO0lBQ25ELElBQUk7UUFFRixNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUE7UUFFekQsSUFBSSxZQUFZO1lBQUUsT0FBTyxzQkFBRyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBRWxHO0lBQUEsTUFBSztRQUNKLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0tBQ2xEO0FBQ0gsQ0FBQyxDQUFDLENBQUE7QUFFRixlQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUMsRUFBQyxPQUFPLEVBQUMsRUFBQyxFQUFFO0lBQ25DLE9BQU8sc0JBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQ2pFLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERhdGFiYXNlIGZyb20gJ0Bpb2M6QWRvbmlzL0x1Y2lkL0RhdGFiYXNlJ1xuaW1wb3J0IFJvdXRlIGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvUm91dGUnXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXInXG5pbXBvcnQgSGFzaCBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0hhc2gnXG5pbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbidcblxuXG5cblJvdXRlLmdldCgnc2lnbnVwJywgYXN5bmMgKCkgPT4ge1xuICByZXR1cm4gYXdhaXQgVXNlci5jcmVhdGUoeyBlbWFpbDogJ0hlbnJpJywgcGFzc3dvcmQ6J3lvdXBpJyB9KVxufSlcblxuUm91dGUucG9zdCgnbG9naW4nLCBhc3luYyAoeyBhdXRoLCByZXF1ZXN0LCByZXNwb25zZSB9KSA9PiB7XG4gIC8vIEdldCB0aGUgcGFyYW0gb2YgdXNlciBpbiB0aGUgcmVxdWVzdFxuICBjb25zdCBlbWFpbCA9IHJlcXVlc3QuaW5wdXQoJ2VtYWlsJylcbiAgY29uc3QgcGFzc3dvcmQgPSByZXF1ZXN0LmlucHV0KCdwYXNzd29yZCcpXG4gIHRyeSB7XG5cbiAgICAvLyBHZW5lcmF0ZSB0b2tlblxuICAgIGNvbnN0IHRva2VuID0gIGp3dC5zaWduKHtcbiAgICAgIGRhdGE6ICdmb29iYXInXG4gICAgfSwgJ1RPS0VOX1BSSVZBVEVfS0VZJywgeyBleHBpcmVzSW46ICczMG0nIH0pO1xuXG4gICAgLy8gR2VuZXJhdGUgcmVmcmVzaCB0b2tlblxuICAgIGNvbnN0IHJlZnJlc2hfdG9rZW4gPSBhd2FpdCBhdXRoLnVzZSgnYXBpJykuYXR0ZW1wdChlbWFpbCwgcGFzc3dvcmQsIHtcbiAgICAgIGV4cGlyZXNJbjonMWRheXMnXG4gICAgfSlcblxuICAgIC8vIEdpdmUgdGhlIHRva2VuIHRvIHRoZSBjbGllbnRcbiAgICByZXR1cm4ge3Rva2VuLCByZWZyZXNoX3Rva2VufVxuXG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KCdJbnZhbGlkIGNyZWRlbnRpYWxzJylcbiAgfVxufSlcblxuUm91dGUuZ2V0KCdyZWZyZXNoX3Rva2VuJywgYXN5bmMoe2F1dGgsICByZXNwb25zZX0pPT57XG4gIHRyeSB7XG4gICAgLy8gQ2hlY2sgcmVmcmVzaCB0b2tlbiBhbmQgZ2l2ZSBhbiBhY2NlcyB0b2tlblxuICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdXRoZW50aWNhdGUoKVxuXG4gICAgaWYgKHJlZnJlc2hUb2tlbikgcmV0dXJuIGp3dC5zaWduKHsgZGF0YTogJ2Zvb2JhcicgfSwgJ1RPS0VOX1BSSVZBVEVfS0VZJywgeyBleHBpcmVzSW46ICczMG0nIH0pO1xuICBcbiAgfWNhdGNoe1xuICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KCdJbnZhbGlkIGNyZWRlbnRpYWxzJylcbiAgfVxufSlcblxuUm91dGUuZ2V0KCdjaGVjaycsIGFzeW5jKHtyZXF1ZXN0fSk9PntcbiAgcmV0dXJuIGp3dC52ZXJpZnkocmVxdWVzdC5pbnB1dCgndG9rZW4nKSwgJ1RPS0VOX1BSSVZBVEVfS0VZJyk7XG59KSJdfQ==
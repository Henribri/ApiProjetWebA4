"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.group(() => {
    Route_1.default.post('address/:type', 'AddressesController.create');
    Route_1.default.get('addresses', 'AddressesController.index');
    Route_1.default.get('address/:type', 'AddressesController.getById');
    Route_1.default.delete('address/:type', 'AddressesController.delete');
    Route_1.default.put('address/:type', 'AddressesController.update');
}).middleware('auth');
Route_1.default.group(() => {
    Route_1.default.post('creditCard', 'CreditCardsController.create');
    Route_1.default.get('creditCards', 'CreditCardsController.index');
    Route_1.default.get('creditCard', 'CreditCardsController.getById');
    Route_1.default.delete('creditCard', 'CreditCardsController.delete');
    Route_1.default.put('creditCard', 'CreditCardsController.update');
}).middleware('auth');
Route_1.default.group(() => {
    Route_1.default.get('users', 'UserController.index');
    Route_1.default.get('user', 'UserController.getById');
    Route_1.default.delete('user', 'UserController.delete');
    Route_1.default.put('user', 'UserController.update');
    Route_1.default.put('user/support', 'UserController.updateSponsor');
}).middleware('auth');
Route_1.default.group(() => {
    Route_1.default.post('user/client', 'UserController.createClient');
    Route_1.default.post('user/delivery', 'UserController.createDelivery');
    Route_1.default.post('user/restorer', 'UserController.createRestorer');
    Route_1.default.get('restorers', 'RestorersController.index');
});
Route_1.default.group(() => {
    Route_1.default.post('restorer', 'RestorersController.createClient');
    Route_1.default.get('restorer', 'RestorersController.getById');
    Route_1.default.delete('restorer', 'RestorersController.delete');
    Route_1.default.put('restorer', 'RestorersController.update');
}).middleware('auth');
Route_1.default.get('', () => {
    return '';
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0ZBQTBDO0FBRzFDLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRSxFQUFFO0lBQ1osZUFBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQTtJQUN6RCxlQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQ2xELGVBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLDZCQUE2QixDQUFDLENBQUE7SUFDekQsZUFBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUMsNEJBQTRCLENBQUMsQ0FBQTtJQUMxRCxlQUFLLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBQyw0QkFBNEIsQ0FBQyxDQUFBO0FBQzNELENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUtyQixlQUFLLENBQUMsS0FBSyxDQUFDLEdBQUUsRUFBRTtJQUNaLGVBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLDhCQUE4QixDQUFDLENBQUE7SUFDeEQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsNkJBQTZCLENBQUMsQ0FBQTtJQUN0RCxlQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO0lBQ3hELGVBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFDLDhCQUE4QixDQUFDLENBQUE7SUFDekQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUMsOEJBQThCLENBQUMsQ0FBQTtBQUMxRCxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7QUFHckIsZUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFFLEVBQUU7SUFDWixlQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBQyxzQkFBc0IsQ0FBQyxDQUFBO0lBQ3pDLGVBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLHdCQUF3QixDQUFDLENBQUE7SUFDM0MsZUFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUMsdUJBQXVCLENBQUMsQ0FBQTtJQUM1QyxlQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyx1QkFBdUIsQ0FBQyxDQUFBO0lBQ3pDLGVBQUssQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFDLDhCQUE4QixDQUFDLENBQUE7QUFDNUQsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRXJCLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRSxFQUFFO0lBQ1osZUFBSyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsNkJBQTZCLENBQUMsQ0FBQTtJQUN4RCxlQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO0lBQzVELGVBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLCtCQUErQixDQUFDLENBQUE7SUFDNUQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUMsMkJBQTJCLENBQUMsQ0FBQTtBQUN0RCxDQUFDLENBQUMsQ0FBQTtBQUlGLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRSxFQUFFO0lBQ1osZUFBSyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsa0NBQWtDLENBQUMsQ0FBQTtJQUMxRCxlQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSw2QkFBNkIsQ0FBQyxDQUFBO0lBQ3BELGVBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFDLDRCQUE0QixDQUFDLENBQUE7SUFDckQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsNEJBQTRCLENBQUMsQ0FBQTtBQUN0RCxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7QUFNckIsZUFBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRSxFQUFFO0lBQ2QsT0FBTyxFQUFFLENBQUE7QUFDYixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSb3V0ZSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL1JvdXRlJ1xuXG4vKiBHcm91cGUgZGUgcm91dGUgcG91ciBsYSBtYW5pcHVsYXRpb24gZGVzIGFkcmVzc2VzICovXG5Sb3V0ZS5ncm91cCgoKT0+e1xuICAgIFJvdXRlLnBvc3QoJ2FkZHJlc3MvOnR5cGUnLCAnQWRkcmVzc2VzQ29udHJvbGxlci5jcmVhdGUnKVxuICAgIFJvdXRlLmdldCgnYWRkcmVzc2VzJywnQWRkcmVzc2VzQ29udHJvbGxlci5pbmRleCcpXG4gICAgUm91dGUuZ2V0KCdhZGRyZXNzLzp0eXBlJywgJ0FkZHJlc3Nlc0NvbnRyb2xsZXIuZ2V0QnlJZCcpXG4gICAgUm91dGUuZGVsZXRlKCdhZGRyZXNzLzp0eXBlJywnQWRkcmVzc2VzQ29udHJvbGxlci5kZWxldGUnKVxuICAgIFJvdXRlLnB1dCgnYWRkcmVzcy86dHlwZScsJ0FkZHJlc3Nlc0NvbnRyb2xsZXIudXBkYXRlJylcbn0pLm1pZGRsZXdhcmUoJ2F1dGgnKVxuXG5cblxuLyogR3JvdXBlIGRlIHJvdXRlIHBvdXIgbGEgbWFuaXB1bGF0aW9uIGRlcyBtb3llbnMgZGUgcGFpZW1lbnRzICovXG5Sb3V0ZS5ncm91cCgoKT0+e1xuICAgIFJvdXRlLnBvc3QoJ2NyZWRpdENhcmQnLCAnQ3JlZGl0Q2FyZHNDb250cm9sbGVyLmNyZWF0ZScpXG4gICAgUm91dGUuZ2V0KCdjcmVkaXRDYXJkcycsJ0NyZWRpdENhcmRzQ29udHJvbGxlci5pbmRleCcpXG4gICAgUm91dGUuZ2V0KCdjcmVkaXRDYXJkJywgJ0NyZWRpdENhcmRzQ29udHJvbGxlci5nZXRCeUlkJylcbiAgICBSb3V0ZS5kZWxldGUoJ2NyZWRpdENhcmQnLCdDcmVkaXRDYXJkc0NvbnRyb2xsZXIuZGVsZXRlJylcbiAgICBSb3V0ZS5wdXQoJ2NyZWRpdENhcmQnLCdDcmVkaXRDYXJkc0NvbnRyb2xsZXIudXBkYXRlJylcbn0pLm1pZGRsZXdhcmUoJ2F1dGgnKVxuXG4vKiBHcm91cGUgZGUgcm91dGUgcG91ciBsYSBtYW5pcHVsYXRpb24gZGVzIHV0aWxpc2F0ZXVycyAqL1xuUm91dGUuZ3JvdXAoKCk9PntcbiAgICBSb3V0ZS5nZXQoJ3VzZXJzJywnVXNlckNvbnRyb2xsZXIuaW5kZXgnKVxuICAgIFJvdXRlLmdldCgndXNlcicsICdVc2VyQ29udHJvbGxlci5nZXRCeUlkJylcbiAgICBSb3V0ZS5kZWxldGUoJ3VzZXInLCdVc2VyQ29udHJvbGxlci5kZWxldGUnKVxuICAgIFJvdXRlLnB1dCgndXNlcicsJ1VzZXJDb250cm9sbGVyLnVwZGF0ZScpXG4gICAgUm91dGUucHV0KCd1c2VyL3N1cHBvcnQnLCdVc2VyQ29udHJvbGxlci51cGRhdGVTcG9uc29yJylcbn0pLm1pZGRsZXdhcmUoJ2F1dGgnKVxuXG5Sb3V0ZS5ncm91cCgoKT0+e1xuICAgIFJvdXRlLnBvc3QoJ3VzZXIvY2xpZW50JywgJ1VzZXJDb250cm9sbGVyLmNyZWF0ZUNsaWVudCcpXG4gICAgUm91dGUucG9zdCgndXNlci9kZWxpdmVyeScsICdVc2VyQ29udHJvbGxlci5jcmVhdGVEZWxpdmVyeScpXG4gICAgUm91dGUucG9zdCgndXNlci9yZXN0b3JlcicsICdVc2VyQ29udHJvbGxlci5jcmVhdGVSZXN0b3JlcicpXG4gICAgUm91dGUuZ2V0KCdyZXN0b3JlcnMnLCdSZXN0b3JlcnNDb250cm9sbGVyLmluZGV4Jylcbn0pXG5cblxuLyogR3JvdXBlIGRlIHJvdXRlIHBvdXIgbGEgbWFuaXB1bGF0aW9uIGRlcyByZXN0b3JlciAqL1xuUm91dGUuZ3JvdXAoKCk9PntcbiAgICBSb3V0ZS5wb3N0KCdyZXN0b3JlcicsICdSZXN0b3JlcnNDb250cm9sbGVyLmNyZWF0ZUNsaWVudCcpXG4gICAgUm91dGUuZ2V0KCdyZXN0b3JlcicsICdSZXN0b3JlcnNDb250cm9sbGVyLmdldEJ5SWQnKVxuICAgIFJvdXRlLmRlbGV0ZSgncmVzdG9yZXInLCdSZXN0b3JlcnNDb250cm9sbGVyLmRlbGV0ZScpXG4gICAgUm91dGUucHV0KCdyZXN0b3JlcicsJ1Jlc3RvcmVyc0NvbnRyb2xsZXIudXBkYXRlJylcbn0pLm1pZGRsZXdhcmUoJ2F1dGgnKVxuXG5cblxuXG5cblJvdXRlLmdldCgnJywgKCk9PntcbiAgICByZXR1cm4gJydcbn0pXG5cbi8qXG5Sb3V0ZS5wb3N0KCdzaWdudXAnLCAnVXNlckNvbnRyb2xsZXIuY3JlYXRlJylcblxuUm91dGUucG9zdCgnbG9naW4nLCdBdXRoQ29udHJvbGxlci5sb2dpbicpXG5cblJvdXRlLmdldCgncmVmcmVzaF90b2tlbicsICdBdXRoQ29udHJvbGxlci5yZWZyZXNoX3Rva2VuJylcblxuUm91dGUuZ2V0KCdjaGVjaycsICdBdXRoQ29udHJvbGxlci5jaGVjaycpKi8iXX0=
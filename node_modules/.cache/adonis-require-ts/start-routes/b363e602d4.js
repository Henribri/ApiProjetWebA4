"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.group(() => {
    Route_1.default.post('address/:type', 'AddressesController.create');
    Route_1.default.get('addresses', 'AddressesController.index');
    Route_1.default.get('address/:type', 'AddressesController.getById');
    Route_1.default.delete('address/:type', 'AddressesController.delete');
    Route_1.default.put('address/:type', 'AddressesController.update');
}).middleware('auth');
Route_1.default.group(() => {
    Route_1.default.post('creditCard', 'CreditCardsController.create');
    Route_1.default.get('creditCards', 'CreditCardsController.index');
    Route_1.default.get('creditCard', 'CreditCardsController.getById');
    Route_1.default.delete('creditCard', 'CreditCardsController.delete');
    Route_1.default.put('creditCard', 'CreditCardsController.update');
}).middleware('auth');
Route_1.default.group(() => {
    Route_1.default.get('users', 'UserController.index');
    Route_1.default.get('user', 'UserController.getById');
    Route_1.default.delete('user', 'UserController.delete');
    Route_1.default.put('user', 'UserController.update');
    Route_1.default.put('user/support', 'UserController.updateSponsor');
}).middleware('auth');
Route_1.default.group(() => {
    Route_1.default.post('user/client', 'UserController.createClient');
    Route_1.default.post('user/delivery', 'UserController.createDelivery');
    Route_1.default.post('user/restorer', 'UserController.createRestorer');
    Route_1.default.get('restorers', 'RestorersController.index');
});
Route_1.default.group(() => {
    Route_1.default.post('restorer', 'RestorersController.createClient');
    Route_1.default.get('restorer', 'RestorersController.getById');
    Route_1.default.delete('restorer', 'RestorersController.delete');
    Route_1.default.put('restorer', 'RestorersController.update');
}).middleware('auth');
Route_1.default.get('', () => {
    return '';
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0ZBQTBDO0FBRzFDLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRSxFQUFFO0lBQ1osZUFBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQTtJQUN6RCxlQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBQywyQkFBMkIsQ0FBQyxDQUFBO0lBQ2xELGVBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLDZCQUE2QixDQUFDLENBQUE7SUFDekQsZUFBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUMsNEJBQTRCLENBQUMsQ0FBQTtJQUMxRCxlQUFLLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBQyw0QkFBNEIsQ0FBQyxDQUFBO0FBQzNELENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUtyQixlQUFLLENBQUMsS0FBSyxDQUFDLEdBQUUsRUFBRTtJQUNaLGVBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLDhCQUE4QixDQUFDLENBQUE7SUFDeEQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsNkJBQTZCLENBQUMsQ0FBQTtJQUN0RCxlQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO0lBQ3hELGVBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFDLDhCQUE4QixDQUFDLENBQUE7SUFDekQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUMsOEJBQThCLENBQUMsQ0FBQTtBQUMxRCxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7QUFHckIsZUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFFLEVBQUU7SUFDWixlQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBQyxzQkFBc0IsQ0FBQyxDQUFBO0lBQ3pDLGVBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLHdCQUF3QixDQUFDLENBQUE7SUFDM0MsZUFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUMsdUJBQXVCLENBQUMsQ0FBQTtJQUM1QyxlQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyx1QkFBdUIsQ0FBQyxDQUFBO0lBQ3pDLGVBQUssQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFDLDhCQUE4QixDQUFDLENBQUE7QUFDNUQsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRXJCLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRSxFQUFFO0lBQ1osZUFBSyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsNkJBQTZCLENBQUMsQ0FBQTtJQUN4RCxlQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO0lBQzVELGVBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLCtCQUErQixDQUFDLENBQUE7SUFDNUQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUMsMkJBQTJCLENBQUMsQ0FBQTtBQUN0RCxDQUFDLENBQUMsQ0FBQTtBQUlGLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRSxFQUFFO0lBQ1osZUFBSyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsa0NBQWtDLENBQUMsQ0FBQTtJQUMxRCxlQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSw2QkFBNkIsQ0FBQyxDQUFBO0lBQ3BELGVBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFDLDRCQUE0QixDQUFDLENBQUE7SUFDckQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsNEJBQTRCLENBQUMsQ0FBQTtBQUN0RCxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7QUFNckIsZUFBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRSxFQUFFO0lBQ2QsT0FBTyxFQUFFLENBQUE7QUFDYixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSb3V0ZSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL1JvdXRlJ1xyXG5cclxuLyogR3JvdXBlIGRlIHJvdXRlIHBvdXIgbGEgbWFuaXB1bGF0aW9uIGRlcyBhZHJlc3NlcyAqL1xyXG5Sb3V0ZS5ncm91cCgoKT0+e1xyXG4gICAgUm91dGUucG9zdCgnYWRkcmVzcy86dHlwZScsICdBZGRyZXNzZXNDb250cm9sbGVyLmNyZWF0ZScpXHJcbiAgICBSb3V0ZS5nZXQoJ2FkZHJlc3NlcycsJ0FkZHJlc3Nlc0NvbnRyb2xsZXIuaW5kZXgnKVxyXG4gICAgUm91dGUuZ2V0KCdhZGRyZXNzLzp0eXBlJywgJ0FkZHJlc3Nlc0NvbnRyb2xsZXIuZ2V0QnlJZCcpXHJcbiAgICBSb3V0ZS5kZWxldGUoJ2FkZHJlc3MvOnR5cGUnLCdBZGRyZXNzZXNDb250cm9sbGVyLmRlbGV0ZScpXHJcbiAgICBSb3V0ZS5wdXQoJ2FkZHJlc3MvOnR5cGUnLCdBZGRyZXNzZXNDb250cm9sbGVyLnVwZGF0ZScpXHJcbn0pLm1pZGRsZXdhcmUoJ2F1dGgnKVxyXG5cclxuXHJcblxyXG4vKiBHcm91cGUgZGUgcm91dGUgcG91ciBsYSBtYW5pcHVsYXRpb24gZGVzIG1veWVucyBkZSBwYWllbWVudHMgKi9cclxuUm91dGUuZ3JvdXAoKCk9PntcclxuICAgIFJvdXRlLnBvc3QoJ2NyZWRpdENhcmQnLCAnQ3JlZGl0Q2FyZHNDb250cm9sbGVyLmNyZWF0ZScpXHJcbiAgICBSb3V0ZS5nZXQoJ2NyZWRpdENhcmRzJywnQ3JlZGl0Q2FyZHNDb250cm9sbGVyLmluZGV4JylcclxuICAgIFJvdXRlLmdldCgnY3JlZGl0Q2FyZCcsICdDcmVkaXRDYXJkc0NvbnRyb2xsZXIuZ2V0QnlJZCcpXHJcbiAgICBSb3V0ZS5kZWxldGUoJ2NyZWRpdENhcmQnLCdDcmVkaXRDYXJkc0NvbnRyb2xsZXIuZGVsZXRlJylcclxuICAgIFJvdXRlLnB1dCgnY3JlZGl0Q2FyZCcsJ0NyZWRpdENhcmRzQ29udHJvbGxlci51cGRhdGUnKVxyXG59KS5taWRkbGV3YXJlKCdhdXRoJylcclxuXHJcbi8qIEdyb3VwZSBkZSByb3V0ZSBwb3VyIGxhIG1hbmlwdWxhdGlvbiBkZXMgdXRpbGlzYXRldXJzICovXHJcblJvdXRlLmdyb3VwKCgpPT57XHJcbiAgICBSb3V0ZS5nZXQoJ3VzZXJzJywnVXNlckNvbnRyb2xsZXIuaW5kZXgnKVxyXG4gICAgUm91dGUuZ2V0KCd1c2VyJywgJ1VzZXJDb250cm9sbGVyLmdldEJ5SWQnKVxyXG4gICAgUm91dGUuZGVsZXRlKCd1c2VyJywnVXNlckNvbnRyb2xsZXIuZGVsZXRlJylcclxuICAgIFJvdXRlLnB1dCgndXNlcicsJ1VzZXJDb250cm9sbGVyLnVwZGF0ZScpXHJcbiAgICBSb3V0ZS5wdXQoJ3VzZXIvc3VwcG9ydCcsJ1VzZXJDb250cm9sbGVyLnVwZGF0ZVNwb25zb3InKVxyXG59KS5taWRkbGV3YXJlKCdhdXRoJylcclxuXHJcblJvdXRlLmdyb3VwKCgpPT57XHJcbiAgICBSb3V0ZS5wb3N0KCd1c2VyL2NsaWVudCcsICdVc2VyQ29udHJvbGxlci5jcmVhdGVDbGllbnQnKVxyXG4gICAgUm91dGUucG9zdCgndXNlci9kZWxpdmVyeScsICdVc2VyQ29udHJvbGxlci5jcmVhdGVEZWxpdmVyeScpXHJcbiAgICBSb3V0ZS5wb3N0KCd1c2VyL3Jlc3RvcmVyJywgJ1VzZXJDb250cm9sbGVyLmNyZWF0ZVJlc3RvcmVyJylcclxuICAgIFJvdXRlLmdldCgncmVzdG9yZXJzJywnUmVzdG9yZXJzQ29udHJvbGxlci5pbmRleCcpXHJcbn0pXHJcblxyXG5cclxuLyogR3JvdXBlIGRlIHJvdXRlIHBvdXIgbGEgbWFuaXB1bGF0aW9uIGRlcyByZXN0b3JlciAqL1xyXG5Sb3V0ZS5ncm91cCgoKT0+e1xyXG4gICAgUm91dGUucG9zdCgncmVzdG9yZXInLCAnUmVzdG9yZXJzQ29udHJvbGxlci5jcmVhdGVDbGllbnQnKVxyXG4gICAgUm91dGUuZ2V0KCdyZXN0b3JlcicsICdSZXN0b3JlcnNDb250cm9sbGVyLmdldEJ5SWQnKVxyXG4gICAgUm91dGUuZGVsZXRlKCdyZXN0b3JlcicsJ1Jlc3RvcmVyc0NvbnRyb2xsZXIuZGVsZXRlJylcclxuICAgIFJvdXRlLnB1dCgncmVzdG9yZXInLCdSZXN0b3JlcnNDb250cm9sbGVyLnVwZGF0ZScpXHJcbn0pLm1pZGRsZXdhcmUoJ2F1dGgnKVxyXG5cclxuXHJcblxyXG5cclxuXHJcblJvdXRlLmdldCgnJywgKCk9PntcclxuICAgIHJldHVybiAnJ1xyXG59KVxyXG5cclxuLypcclxuUm91dGUucG9zdCgnc2lnbnVwJywgJ1VzZXJDb250cm9sbGVyLmNyZWF0ZScpXHJcblxyXG5Sb3V0ZS5wb3N0KCdsb2dpbicsJ0F1dGhDb250cm9sbGVyLmxvZ2luJylcclxuXHJcblJvdXRlLmdldCgncmVmcmVzaF90b2tlbicsICdBdXRoQ29udHJvbGxlci5yZWZyZXNoX3Rva2VuJylcclxuXHJcblJvdXRlLmdldCgnY2hlY2snLCAnQXV0aENvbnRyb2xsZXIuY2hlY2snKSovIl19
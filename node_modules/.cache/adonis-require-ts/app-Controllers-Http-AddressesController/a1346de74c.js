"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Address_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Address"));
class AddressesController {
    async index({ response }) {
        const addresses = await Address_1.default.query();
        return response.json({ addresses });
    }
    async getById({ params, response }) {
        const address = await Address_1.default.findOrFail(params.id);
        return response.json({ address });
    }
    async create({ request, response }) {
        const address = await Address_1.default.create({ address_city: request.body()['address_city'], address_street: request.body()['address_street'], address_street_number: request.body()['address_street_number'], address_postal_code: request.body()['address_postal_code'] });
        return response.json({ address });
    }
    async update({ request, response, params }) {
        const address = await Address_1.default.findOrFail(params.id);
        address.merge(request.body());
        await address.save();
        return response.json({ address });
    }
    async delete({ response, params }) {
        const address = await Address_1.default.findOrFail(params.id);
        await address.delete();
        return response.json({ address });
    }
}
exports.default = AddressesController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWRkcmVzc2VzQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFkZHJlc3Nlc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSx1RkFBeUM7QUFHekMsTUFBcUIsbUJBQW1CO0lBRTdCLEtBQUssQ0FBQyxLQUFLLENBQUUsRUFBQyxRQUFRLEVBQXFCO1FBQzlDLE1BQU0sU0FBUyxHQUFHLE1BQU0saUJBQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUN2QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQyxTQUFTLEVBQUMsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFFLEVBQUMsTUFBTSxFQUFDLFFBQVEsRUFBcUI7UUFDdkQsTUFBTSxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFcEQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRyxRQUFRLEVBQXNCO1FBQzFELE1BQU0sT0FBTyxHQUFHLE1BQU0saUJBQU8sQ0FBQyxNQUFNLENBQUMsRUFBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxxQkFBcUIsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsRUFBRSxtQkFBbUIsRUFBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDblEsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFxQjtRQUNoRSxNQUFNLE9BQU8sR0FBRyxNQUFNLGlCQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwRCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFxQjtRQUN0RCxNQUFNLE9BQU8sR0FBRyxNQUFNLGlCQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwRCxNQUFNLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV2QixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFBO0lBQ25DLENBQUM7Q0FDSjtBQS9CRCxzQ0ErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcblxuaW1wb3J0IEFkZHJlc3MgZnJvbSBcIkFwcC9Nb2RlbHMvQWRkcmVzc1wiO1xuaW1wb3J0IHsgYWRkIH0gZnJvbSAnd2luc3Rvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFkZHJlc3Nlc0NvbnRyb2xsZXIge1xuXG4gICAgcHVibGljIGFzeW5jIGluZGV4ICh7cmVzcG9uc2V9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCBhZGRyZXNzZXMgPSBhd2FpdCBBZGRyZXNzLnF1ZXJ5KClcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oe2FkZHJlc3Nlc30pXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldEJ5SWQgKHtwYXJhbXMscmVzcG9uc2V9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgQWRkcmVzcy5maW5kT3JGYWlsKHBhcmFtcy5pZCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oe2FkZHJlc3N9KVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjcmVhdGUoeyByZXF1ZXN0ICwgcmVzcG9uc2UgfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGF3YWl0IEFkZHJlc3MuY3JlYXRlKHthZGRyZXNzX2NpdHk6IHJlcXVlc3QuYm9keSgpWydhZGRyZXNzX2NpdHknXSwgYWRkcmVzc19zdHJlZXQ6IHJlcXVlc3QuYm9keSgpWydhZGRyZXNzX3N0cmVldCddLCBhZGRyZXNzX3N0cmVldF9udW1iZXI6IHJlcXVlc3QuYm9keSgpWydhZGRyZXNzX3N0cmVldF9udW1iZXInXSwgYWRkcmVzc19wb3N0YWxfY29kZTpyZXF1ZXN0LmJvZHkoKVsnYWRkcmVzc19wb3N0YWxfY29kZSddIH0pO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbih7YWRkcmVzc30pXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZSAoe3JlcXVlc3QsIHJlc3BvbnNlLCBwYXJhbXN9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgQWRkcmVzcy5maW5kT3JGYWlsKHBhcmFtcy5pZCk7XG4gICAgICAgIGFkZHJlc3MubWVyZ2UocmVxdWVzdC5ib2R5KCkpO1xuICAgICAgICBhd2FpdCBhZGRyZXNzLnNhdmUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oe2FkZHJlc3N9KVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBkZWxldGUoe3Jlc3BvbnNlLCBwYXJhbXN9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgQWRkcmVzcy5maW5kT3JGYWlsKHBhcmFtcy5pZCk7XG4gICAgICAgIGF3YWl0IGFkZHJlc3MuZGVsZXRlKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oe2FkZHJlc3N9KVxuICAgIH1cbn1cbiJdfQ==
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Article_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Article"));
class ArticlesController {
    async getOneArticle({ request, response }) {
        try {
            return await Article_1.default.findOne({ _id: request.input('article_id') });
        }
        catch (err) {
            return response.status(502);
        }
    }
    async getAllArticles({ response }) {
        try {
            return await Article_1.default.find();
        }
        catch (err) {
            return response.status(502);
        }
    }
    async getArticlesByType({ request, response }) {
        try {
            return await Article_1.default.find({ type: request.input('article_type') });
        }
        catch (err) {
            return response.status(502);
        }
    }
    async createArticle({ request, response }) {
        try {
            const article = new Article_1.default(request.body());
            article.save();
            return response.ok("Article created");
        }
        catch (err) {
            return response.status(502);
        }
    }
    async editArticle({ request, response }) {
        try {
            await Article_1.default.updateOne({ _id: request.input('article_id') }, request.body());
            return response.ok("Article edited");
        }
        catch (err) {
            return response.status(502);
        }
    }
    async deleteArticle({ request, response }) {
        try {
            await Article_1.default.deleteOne({ _id: request.input('article_id') });
            return response.ok("Article deleted");
        }
        catch (err) {
            return response.status(502);
        }
    }
}
exports.default = ArticlesController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJ0aWNsZXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQXJ0aWNsZXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsdUZBQXdDO0FBQ3hDLE1BQXFCLGtCQUFrQjtJQUszQixLQUFLLENBQUMsYUFBYSxDQUFFLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBcUI7UUFDaEUsSUFBSTtZQUNBLE9BQU8sTUFBTSxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxFQUFDLEdBQUcsRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsQ0FBQTtTQUNsRTtRQUFBLE9BQU0sR0FBRyxFQUFDO1lBQ1AsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxjQUFjLENBQUUsRUFBQyxRQUFRLEVBQXNCO1FBQ3hELElBQUc7WUFDQyxPQUFPLE1BQU0saUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtTQUM5QjtRQUFBLE9BQU0sR0FBRyxFQUFDO1lBQ1AsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQ3BFLElBQUc7WUFDQyxPQUFPLE1BQU0saUJBQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBQyxDQUFDLENBQUE7U0FDbEU7UUFBQSxPQUFNLEdBQUcsRUFBQztZQUNQLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUM5QjtJQUNMLENBQUM7SUFJTSxLQUFLLENBQUMsYUFBYSxDQUFFLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBcUI7UUFDL0QsSUFBRztZQUNDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUMzQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDZCxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtTQUN4QztRQUFBLE9BQU0sR0FBRyxFQUFDO1lBQ1AsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO0lBRUwsQ0FBQztJQUlNLEtBQUssQ0FBQyxXQUFXLENBQUUsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFxQjtRQUM3RCxJQUFHO1lBQ0MsTUFBTSxpQkFBTyxDQUFDLFNBQVMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFDLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7WUFDMUUsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUE7U0FDdkM7UUFBQSxPQUFNLEdBQUcsRUFBQztZQUNQLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUM5QjtJQUNMLENBQUM7SUFHTSxLQUFLLENBQUMsYUFBYSxDQUFFLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBcUI7UUFDL0QsSUFBRztZQUNDLE1BQU0saUJBQU8sQ0FBQyxTQUFTLENBQUMsRUFBQyxHQUFHLEVBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBQyxDQUFDLENBQUE7WUFDMUQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUE7U0FDeEM7UUFBQSxPQUFNLEdBQUcsRUFBQztZQUNQLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUM5QjtJQUVMLENBQUM7Q0FPSjtBQXJFRCxxQ0FxRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcclxuaW1wb3J0IEFydGljbGUgZnJvbSAnQXBwL01vZGVscy9BcnRpY2xlJ1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcnRpY2xlc0NvbnRyb2xsZXIge1xyXG5cclxuICAgIC8qIEFydGljbGUgcmVxdWVzdHMgKi9cclxuXHJcbiAgICAvLyBDaGVyY2hlIHVuIGFydGljbGVcclxuICAgICBwdWJsaWMgYXN5bmMgZ2V0T25lQXJ0aWNsZSAoe3JlcXVlc3QsIHJlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcclxuICAgICAgICB0cnkgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgQXJ0aWNsZS5maW5kT25lKHtfaWQ6cmVxdWVzdC5pbnB1dCgnYXJ0aWNsZV9pZCcpfSlcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBnZXRBbGxBcnRpY2xlcyAoe3Jlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCl7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgQXJ0aWNsZS5maW5kKClcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBnZXRBcnRpY2xlc0J5VHlwZSh7cmVxdWVzdCwgcmVzcG9uc2V9IDogSHR0cENvbnRleHRDb250cmFjdCl7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgQXJ0aWNsZS5maW5kKHt0eXBlOnJlcXVlc3QuaW5wdXQoJ2FydGljbGVfdHlwZScpfSlcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBDcmVlciB1biBhcnRpY2xlXHJcbiAgICBwdWJsaWMgYXN5bmMgY3JlYXRlQXJ0aWNsZSAoe3JlcXVlc3QsIHJlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGNvbnN0IGFydGljbGUgPSBuZXcgQXJ0aWNsZShyZXF1ZXN0LmJvZHkoKSkgICAgXHJcbiAgICAgICAgICAgIGFydGljbGUuc2F2ZSgpXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5vayhcIkFydGljbGUgY3JlYXRlZFwiKVxyXG4gICAgICAgIH1jYXRjaChlcnIpe1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMilcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgLy8gRWRpdCB1biBhcnRpY2xlXHJcbiAgICBwdWJsaWMgYXN5bmMgZWRpdEFydGljbGUgKHtyZXF1ZXN0LCByZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCl7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICBhd2FpdCBBcnRpY2xlLnVwZGF0ZU9uZSh7X2lkOnJlcXVlc3QuaW5wdXQoJ2FydGljbGVfaWQnKX0sIHJlcXVlc3QuYm9keSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uub2soXCJBcnRpY2xlIGVkaXRlZFwiKSAgIFxyXG4gICAgICAgIH1jYXRjaChlcnIpe1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBkZWxldGVBcnRpY2xlICh7cmVxdWVzdCwgcmVzcG9uc2V9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgYXdhaXQgQXJ0aWNsZS5kZWxldGVPbmUoe19pZDpyZXF1ZXN0LmlucHV0KCdhcnRpY2xlX2lkJyl9KVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uub2soXCJBcnRpY2xlIGRlbGV0ZWRcIikgIFxyXG4gICAgICAgIH1jYXRjaChlcnIpe1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMilcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbn1cclxuIl19
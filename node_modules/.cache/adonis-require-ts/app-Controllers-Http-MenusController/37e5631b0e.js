"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Menu_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Menu"));
class MenusController {
    async getOneMenu({ request, response }) {
        try {
            return await Menu_1.default.findOne({ _id: request.input('menu_id') });
        }
        catch (err) {
            return response.status(502);
        }
    }
    async getAllMenus({ response }) {
        try {
            return await Menu_1.default.find();
        }
        catch (err) {
            return response.status(502);
        }
    }
    async getMenusByRestorer({ request, response }) {
        try {
            return await Menu_1.default.find({ restorer: request.input("restorer_id") });
        }
        catch (err) {
            return response.status(502);
        }
    }
    async createMenu({ request, response }) {
        try {
            const menu = await new Menu_1.default(request.body());
            menu.save();
            return response.ok("Menu created");
        }
        catch (err) {
            return response.status(502);
        }
    }
    async editMenu({ request, response }) {
        try {
            await Menu_1.default.updateOne({ _id: request.input("menu_id") }, request.body());
            return response.ok("Menu edited");
        }
        catch (err) {
            return response.status(502);
        }
    }
    async deleteMenu({ request, response }) {
        try {
            await Menu_1.default.deleteOne({ _id: request.input("menu_id") });
            return response.ok("Menu deleted");
        }
        catch (err) {
            return response.status(502);
        }
    }
}
exports.default = MenusController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWVudXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsaUZBQW1DO0FBRW5DLE1BQXFCLGVBQWU7SUFFekIsS0FBSyxDQUFDLFVBQVUsQ0FBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXFCO1FBQzVELElBQUk7WUFDQSxPQUFPLE1BQU0sY0FBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLEdBQUcsRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtTQUM1RDtRQUFBLE9BQU0sR0FBRyxFQUFDO1lBQ1AsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQUUsRUFBQyxRQUFRLEVBQXNCO1FBQ3JELElBQUc7WUFDQyxPQUFPLE1BQU0sY0FBSSxDQUFDLElBQUksRUFBRSxDQUFBO1NBQzNCO1FBQUEsT0FBTSxHQUFHLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDOUI7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLGtCQUFrQixDQUFFLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBcUI7UUFDcEUsSUFBRztZQUNDLE9BQU8sTUFBTSxjQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUMsQ0FBQyxDQUFBO1NBQ2xFO1FBQUEsT0FBTSxHQUFHLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDOUI7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUM7UUFDeEMsSUFBRztZQUNDLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxjQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7WUFDM0MsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQ1gsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1NBQ3JDO1FBQUEsT0FBTSxHQUFHLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDOUI7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVEsQ0FBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXFCO1FBQzFELElBQUc7WUFDQyxNQUFNLGNBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxHQUFHLEVBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1lBQ3BFLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQTtTQUNwQztRQUFBLE9BQU0sR0FBRyxFQUFDO1lBQ1AsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxVQUFVLENBQUUsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFxQjtRQUM1RCxJQUFHO1lBQ0MsTUFBTSxjQUFJLENBQUMsU0FBUyxDQUFDLEVBQUMsR0FBRyxFQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxDQUFBO1lBQ3BELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQTtTQUNyQztRQUFBLE9BQU0sR0FBRyxFQUFDO1lBQ1AsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO0lBQ0wsQ0FBQztDQUVKO0FBdERELGtDQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xyXG5cclxuaW1wb3J0IE1lbnUgZnJvbSBcIkFwcC9Nb2RlbHMvTWVudVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVudXNDb250cm9sbGVyIHtcclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgZ2V0T25lTWVudSAoe3JlcXVlc3QsIHJlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcclxuICAgICAgICB0cnkgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgTWVudS5maW5kT25lKHtfaWQ6cmVxdWVzdC5pbnB1dCgnbWVudV9pZCcpfSlcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBnZXRBbGxNZW51cyAoe3Jlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCl7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgTWVudS5maW5kKClcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBnZXRNZW51c0J5UmVzdG9yZXIgKHtyZXF1ZXN0LCByZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCl7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgTWVudS5maW5kKHtyZXN0b3JlcjpyZXF1ZXN0LmlucHV0KFwicmVzdG9yZXJfaWRcIil9KVxyXG4gICAgICAgIH1jYXRjaChlcnIpe1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGNyZWF0ZU1lbnUgKHtyZXF1ZXN0LCByZXNwb25zZX0pe1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgY29uc3QgbWVudSA9IGF3YWl0IG5ldyBNZW51KHJlcXVlc3QuYm9keSgpKVxyXG4gICAgICAgICAgICBtZW51LnNhdmUoKVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uub2soXCJNZW51IGNyZWF0ZWRcIilcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBlZGl0TWVudSAoe3JlcXVlc3QsIHJlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGF3YWl0IE1lbnUudXBkYXRlT25lKHtfaWQ6cmVxdWVzdC5pbnB1dChcIm1lbnVfaWRcIil9LCByZXF1ZXN0LmJvZHkoKSlcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm9rKFwiTWVudSBlZGl0ZWRcIilcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBkZWxldGVNZW51ICh7cmVxdWVzdCwgcmVzcG9uc2V9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgYXdhaXQgTWVudS5kZWxldGVPbmUoe19pZDpyZXF1ZXN0LmlucHV0KFwibWVudV9pZFwiKX0pXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5vayhcIk1lbnUgZGVsZXRlZFwiKVxyXG4gICAgICAgIH1jYXRjaChlcnIpe1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Menu_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Menu"));
class MenusController {
    async getOneMenu({ request, response }) {
        try {
            return await Menu_1.default.findOne({ _id: request.input('menu_id') });
        }
        catch (err) {
            return response.status(502);
        }
    }
    async getAllMenus({ response }) {
        try {
            return await Menu_1.default.find();
        }
        catch (err) {
            return response.status(502);
        }
    }
    async getMenusByRestorer({ request, response }) {
        try {
            return await Menu_1.default.find({ restorer: request.input("restorer_id") });
        }
        catch (err) {
            return response.status(502);
        }
    }
    async createMenu({ request, response }) {
        try {
            await Menu_1.default.create(request.body());
            return response.ok("Menu created");
        }
        catch (err) {
            return response.status(502);
        }
    }
    async editMenu({ request, response }) {
        try {
            await Menu_1.default.updateOne({ _id: request.input("menu_id") }, request.body());
            return response.ok("Menu edited");
        }
        catch (err) {
            return response.status(502);
        }
    }
    async deleteMenu({ request, response }) {
        try {
            await Menu_1.default.deleteOne({ _id: request.input("menu_id") });
            return response.ok("Menu deleted");
        }
        catch (err) {
            return response.status(502);
        }
    }
}
exports.default = MenusController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWVudXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsaUZBQW1DO0FBRW5DLE1BQXFCLGVBQWU7SUFZekIsS0FBSyxDQUFDLFVBQVUsQ0FBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXFCO1FBQzVELElBQUk7WUFDQSxPQUFPLE1BQU0sY0FBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLEdBQUcsRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtTQUM1RDtRQUFBLE9BQU0sR0FBRyxFQUFDO1lBQ1AsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO0lBQ0wsQ0FBQztJQVNNLEtBQUssQ0FBQyxXQUFXLENBQUUsRUFBQyxRQUFRLEVBQXNCO1FBQ3JELElBQUc7WUFDQyxPQUFPLE1BQU0sY0FBSSxDQUFDLElBQUksRUFBRSxDQUFBO1NBQzNCO1FBQUEsT0FBTSxHQUFHLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDOUI7SUFDTCxDQUFDO0lBVU0sS0FBSyxDQUFDLGtCQUFrQixDQUFFLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBcUI7UUFDcEUsSUFBRztZQUNDLE9BQU8sTUFBTSxjQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUMsQ0FBQyxDQUFBO1NBQ2xFO1FBQUEsT0FBTSxHQUFHLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDOUI7SUFDTCxDQUFDO0lBV00sS0FBSyxDQUFDLFVBQVUsQ0FBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUM7UUFDeEMsSUFBRztZQUNDLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUNqQyxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUE7U0FDckM7UUFBQSxPQUFNLEdBQUcsRUFBQztZQUNQLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUM5QjtJQUNMLENBQUM7SUFXTSxLQUFLLENBQUMsUUFBUSxDQUFFLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBcUI7UUFDMUQsSUFBRztZQUNDLE1BQU0sY0FBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFDLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7WUFDcEUsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1NBQ3BDO1FBQUEsT0FBTSxHQUFHLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDOUI7SUFDTCxDQUFDO0lBVU0sS0FBSyxDQUFDLFVBQVUsQ0FBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXFCO1FBQzVELElBQUc7WUFDQyxNQUFNLGNBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxHQUFHLEVBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLENBQUE7WUFDcEQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1NBQ3JDO1FBQUEsT0FBTSxHQUFHLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDOUI7SUFDTCxDQUFDO0NBRUo7QUF4R0Qsa0NBd0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXHJcblxyXG5pbXBvcnQgTWVudSBmcm9tIFwiQXBwL01vZGVscy9NZW51XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW51c0NvbnRyb2xsZXIge1xyXG5cclxuXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQGFwaSB7Z2V0fSAvZ2V0X29uZV9tZW51IFJlcXVlc3QgaW5mb3JtYXRpb24gYWJvdXQgYSBtZW51XHJcbiAgICAgKiBAYXBpTmFtZSBnZXRPbmVNZW51XHJcbiAgICAgKiBAYXBpR3JvdXAgTWVudVxyXG4gICAgICogQGFwaVBhcmFtIHtTdHJpbmd9IG1lbnVfaWQgSWQgb2YgYSBtZW51LlxyXG4gICAgICogQGFwaVN1Y2Nlc3Mge09iamVjdH0gbWVudSBNZW51IG9iamVjdC5cclxuICAgICAqIEBhcGlFcnJvciAoNTAyKSBFcnJvciBFcnJvciB0byByZXF1ZXN0IGRhdGFiYXNlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXN5bmMgZ2V0T25lTWVudSAoe3JlcXVlc3QsIHJlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcclxuICAgICAgICB0cnkgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgTWVudS5maW5kT25lKHtfaWQ6cmVxdWVzdC5pbnB1dCgnbWVudV9pZCcpfSlcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBhcGkge2dldH0gL2dldF9hbGxfbWVudXMgUmVxdWVzdCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgbWVudXNcclxuICAgICAqIEBhcGlOYW1lIGdldEFsbE1lbnVcclxuICAgICAqIEBhcGlHcm91cCBNZW51XHJcbiAgICAgKiBAYXBpU3VjY2VzcyB7T2JqZWN0W119IGxpc3RfbWVudSBMaXN0IG9mIG1lbnVzIGZvdW5kLlxyXG4gICAgICogQGFwaUVycm9yICg1MDIpIEVycm9yIEVycm9yIHRvIHJlcXVlc3QgZGF0YWJhc2UuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyBnZXRBbGxNZW51cyAoe3Jlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCl7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgTWVudS5maW5kKClcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBhcGkge2dldH0gL2dldF9tZW51X2J5X3Jlc3RvcmVyIFJlcXVlc3QgaW5mb3JtYXRpb24gYWJvdXQgYSBtZW51IGJ5IHJlc3RvcmVyXHJcbiAgICAgKiBAYXBpTmFtZSBnZXRNZW51c0J5UmVzdG9yZXJcclxuICAgICAqIEBhcGlHcm91cCBNZW51XHJcbiAgICAgKiBAYXBpUGFyYW0ge1N0cmluZ30gcmVzdG9yZXJfaWQgSWQgb2YgYSByZXN0b3Jlci5cclxuICAgICAqIEBhcGlTdWNjZXNzIHtPYmplY3RbXX0gbGlzdF9tZW51IGxpc3Qgb2YgbWVudXMgZm91bmQuXHJcbiAgICAgKiBAYXBpRXJyb3IgKDUwMikgRXJyb3IgRXJyb3IgdG8gcmVxdWVzdCBkYXRhYmFzZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIGdldE1lbnVzQnlSZXN0b3JlciAoe3JlcXVlc3QsIHJlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBNZW51LmZpbmQoe3Jlc3RvcmVyOnJlcXVlc3QuaW5wdXQoXCJyZXN0b3Jlcl9pZFwiKX0pXHJcbiAgICAgICAgfWNhdGNoKGVycil7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNTAyKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQGFwaSB7cG9zdH0gL2NyZWF0ZV9tZW51IENyZWF0ZSBhIG5ldyBtZW51XHJcbiAgICAgKiBAYXBpTmFtZSBjcmVhdGVNZW51XHJcbiAgICAgKiBAYXBpR3JvdXAgTWVudVxyXG4gICAgICogQGFwaVBhcmFtIChCb2R5KSB7T2JqZWN0fSBtZW51IG1lbnUgb2JqZWN0LlxyXG4gICAgICogQGFwaVN1Y2Nlc3MgcmVzcG9uc2UgTWVudSBjcmVhdGVkLlxyXG4gICAgICogQGFwaUVycm9yICg1MDIpIEVycm9yIEVycm9yIHRvIHJlcXVlc3QgZGF0YWJhc2UuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyBjcmVhdGVNZW51ICh7cmVxdWVzdCwgcmVzcG9uc2V9KXtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGF3YWl0IE1lbnUuY3JlYXRlKHJlcXVlc3QuYm9keSgpKSAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uub2soXCJNZW51IGNyZWF0ZWRcIilcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICAvKipcclxuICAgICAqIEBhcGkge3B1dH0gL2VkaXRfbWVudSBFZGl0IGEgbWVudVxyXG4gICAgICogQGFwaU5hbWUgZWRpdE1lbnVcclxuICAgICAqIEBhcGlHcm91cCBNZW51XHJcbiAgICAgKiBAYXBpUGFyYW0ge1N0cmluZ30gbWVudV9pZCBJZCBvZiBtZW51LlxyXG4gICAgICogQGFwaVBhcmFtIChCb2R5KSB7T2JqZWN0fSBtZW51IG1lbnUgb2JqZWN0LlxyXG4gICAgICogQGFwaVN1Y2Nlc3MgcmVzcG9uc2UgTWVudSBlZGl0ZWQuXHJcbiAgICAgKiBAYXBpRXJyb3IgKDUwMikgRXJyb3IgRXJyb3IgdG8gcmVxdWVzdCBkYXRhYmFzZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIGVkaXRNZW51ICh7cmVxdWVzdCwgcmVzcG9uc2V9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgYXdhaXQgTWVudS51cGRhdGVPbmUoe19pZDpyZXF1ZXN0LmlucHV0KFwibWVudV9pZFwiKX0sIHJlcXVlc3QuYm9keSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uub2soXCJNZW51IGVkaXRlZFwiKVxyXG4gICAgICAgIH1jYXRjaChlcnIpe1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogQGFwaSB7ZGVsZXRlfSAvZGVsZXRlX21lbnUgRGVsZXRlIGEgbWVudVxyXG4gICAgICogQGFwaU5hbWUgZGVsZXRlTWVudVxyXG4gICAgICogQGFwaUdyb3VwIE1lbnVcclxuICAgICAqIEBhcGlQYXJhbSB7U3RyaW5nfSBtZW51X2lkIElkIG9mIG1lbnUuXHJcbiAgICAgKiBAYXBpU3VjY2VzcyByZXNwb25zZSBNZW51IGRlbGV0ZWQuXHJcbiAgICAgKiBAYXBpRXJyb3IgKDUwMikgRXJyb3IgRXJyb3IgdG8gcmVxdWVzdCBkYXRhYmFzZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIGRlbGV0ZU1lbnUgKHtyZXF1ZXN0LCByZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCl7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICBhd2FpdCBNZW51LmRlbGV0ZU9uZSh7X2lkOnJlcXVlc3QuaW5wdXQoXCJtZW51X2lkXCIpfSlcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm9rKFwiTWVudSBkZWxldGVkXCIpXHJcbiAgICAgICAgfWNhdGNoKGVycil7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNTAyKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuIl19
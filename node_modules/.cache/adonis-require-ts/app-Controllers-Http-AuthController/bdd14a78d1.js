"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
class AuthController {
    async loginAuth({ auth, request, response }) {
        const email = request.input('email');
        const password = request.input('password');
        try {
            const user = await User_1.default.findBy('user_email', email);
            if (user && await Hash_1.default.verify(user?.password, password)) {
                const token = jsonwebtoken_1.default.sign({
                    user_id: user.user_id
                }, 'TOKEN_PRIVATE_KEY', { expiresIn: '30m' });
                const refresh_token = await auth.use('api').attempt(email, password, {
                    expiresIn: '1days'
                });
                return { token, refresh_token };
            }
            return response.badRequest('Invalid email or password');
        }
        catch (err) {
            return response.badRequest('Invalid credentials');
        }
    }
    async refreshTokenAuth({ auth, response }) {
        try {
            const refreshToken = await auth.use('api').authenticate();
            const user_id = refreshToken.$attributes.user_id;
            if (refreshToken)
                return jsonwebtoken_1.default.sign({ user_id: user_id }, 'TOKEN_PRIVATE_KEY', { expiresIn: '30m' });
        }
        catch {
            return response.badRequest('Invalid credentials');
        }
    }
    async checkAuth({ request }) {
        const token = request.header('authorization').split(" ");
        return jsonwebtoken_1.default.verify(token[1], 'TOKEN_PRIVATE_KEY');
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtGQUF3QztBQUN4QyxpRkFBbUM7QUFDbkMsZ0VBQThCO0FBRTlCLE1BQXFCLGNBQWM7SUFheEIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO1FBRzlDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDcEMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUMxQyxJQUFJO1lBRUYsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQTtZQUVuRCxJQUFHLElBQUksSUFBSSxNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBQyxRQUFRLENBQUMsRUFBQztnQkFFcEQsTUFBTSxLQUFLLEdBQUksc0JBQUcsQ0FBQyxJQUFJLENBQUM7b0JBQ3hCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztpQkFDcEIsRUFBRSxtQkFBbUIsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUc5QyxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7b0JBQ3JFLFNBQVMsRUFBQyxPQUFPO2lCQUNoQixDQUFDLENBQUE7Z0JBSUYsT0FBTyxFQUFDLEtBQUssRUFBRSxhQUFhLEVBQUMsQ0FBQTthQUM5QjtZQUNELE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO1NBRXhEO1FBQUMsT0FBTyxHQUFHLEVBQUM7WUFDWCxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQTtTQUNsRDtJQUNMLENBQUM7SUFXTSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBQyxJQUFJLEVBQUMsUUFBUSxFQUFDO1FBQ3pDLElBQUk7WUFFRixNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUE7WUFFekQsTUFBTSxPQUFPLEdBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUE7WUFFOUMsSUFBSSxZQUFZO2dCQUFFLE9BQU8sc0JBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsbUJBQW1CLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUVwRztRQUFBLE1BQUs7WUFDSixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQTtTQUNsRDtJQUNILENBQUM7SUFXSSxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUMsT0FBTyxFQUFDO1FBQzVCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3hELE9BQU8sc0JBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNKO0FBaEZELGlDQWdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIYXNoIGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSGFzaCdcclxuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJztcclxuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoQ29udHJvbGxlciB7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGFwaSB7cG9zdH0gL2xvZ2luX2F1dGggTG9naW4gYSB1c2VyLlxyXG4gICAgICogQGFwaU5hbWUgbG9naW5cclxuICAgICAqIEBhcGlHcm91cCBBdXRoXHJcbiAgICAgKiBAYXBpUGFyYW0ge1N0cmluZ30gZW1haWwgRW1haWwgb2YgdGhlIHVzZXIuXHJcbiAgICAgKiBAYXBpUGFyYW0ge1N0cmluZ30gcGFzc3dvcmQgUGFzc3dvcmQgb2YgdGhlIHVzZXIuXHJcbiAgICAgKiBAYXBpU3VjY2VzcyB7T2JqZWN0fSBhY2Nlc3NfdG9rZW4gR2l2ZSBhbiBhY2Nlc3MgdG9rZW4uXHJcbiAgICAgKiBAYXBpRXJyb3IgKDUwMCkgRXJyb3IgV3JvbmcgdG9rZW4uXHJcbiAgICAgKi9cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgbG9naW5BdXRoKHsgYXV0aCwgcmVxdWVzdCwgcmVzcG9uc2UgfSl7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgcGFyYW0gb2YgdXNlciBpbiB0aGUgcmVxdWVzdFxyXG4gICAgICAgIGNvbnN0IGVtYWlsID0gcmVxdWVzdC5pbnB1dCgnZW1haWwnKVxyXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxdWVzdC5pbnB1dCgncGFzc3dvcmQnKVxyXG4gICAgICAgIHRyeSB7XHJcblxyXG4gICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5KCd1c2VyX2VtYWlsJyAsZW1haWwpXHJcblxyXG4gICAgICAgICAgaWYodXNlciAmJiBhd2FpdCBIYXNoLnZlcmlmeSh1c2VyPy5wYXNzd29yZCxwYXNzd29yZCkpe1xyXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSB0b2tlblxyXG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9ICBqd3Quc2lnbih7XHJcbiAgICAgICAgICAgIHVzZXJfaWQ6IHVzZXIudXNlcl9pZFxyXG4gICAgICAgICAgICB9LCAnVE9LRU5fUFJJVkFURV9LRVknLCB7IGV4cGlyZXNJbjogJzMwbScgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSByZWZyZXNoIHRva2VuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZnJlc2hfdG9rZW4gPSBhd2FpdCBhdXRoLnVzZSgnYXBpJykuYXR0ZW1wdChlbWFpbCwgcGFzc3dvcmQsIHtcclxuICAgICAgICAgICAgZXhwaXJlc0luOicxZGF5cydcclxuICAgICAgICAgICAgfSlcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBHaXZlIHRoZSB0b2tlbiB0byB0aGUgY2xpZW50XHJcbiAgICAgICAgICAgIHJldHVybiB7dG9rZW4sIHJlZnJlc2hfdG9rZW59XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCgnSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZCcpXHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycil7XHJcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCgnSW52YWxpZCBjcmVkZW50aWFscycpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGFwaSB7Z2V0fSAvcmVmcmVzaF90b2tlbl9hdXRoIEdldCBhIG5ldyBhY2Nlc3MgdG9rZW4uXHJcbiAgICAgKiBAYXBpTmFtZSByZWZyZXNoVG9rZW5cclxuICAgICAqIEBhcGlHcm91cCBBdXRoXHJcbiAgICAgKiBAYXBpUGFyYW0gKEF1dGhvcml6YXRpb24pe1N0cmluZ30gQmVhcmVyIFJlZnJlc2ggVG9rZW4gdmFsdWUgaW4gYXV0aG9yaXNhdGlvbiBCZWFyZXIuXHJcbiAgICAgKiBAYXBpU3VjY2VzcyB7T2JqZWN0fSBhY2Nlc3NfdG9rZW4gR2l2ZSBhIG5ldyBhY2Nlc3MgdG9rZW4uXHJcbiAgICAgKiBAYXBpRXJyb3IgKDUwMCkgRXJyb3IgV3JvbmcgdG9rZW4uXHJcbiAgICAgKi9cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgcmVmcmVzaFRva2VuQXV0aCh7YXV0aCxyZXNwb25zZX0pe1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAvLyBDaGVjayByZWZyZXNoIHRva2VuIGFuZCBnaXZlIGFuIGFjY2VzIHRva2VuXHJcbiAgICAgICAgICBjb25zdCByZWZyZXNoVG9rZW4gPSBhd2FpdCBhdXRoLnVzZSgnYXBpJykuYXV0aGVudGljYXRlKClcclxuXHJcbiAgICAgICAgICBjb25zdCB1c2VyX2lkPXJlZnJlc2hUb2tlbi4kYXR0cmlidXRlcy51c2VyX2lkXHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmIChyZWZyZXNoVG9rZW4pIHJldHVybiBqd3Quc2lnbih7IHVzZXJfaWQ6IHVzZXJfaWQgfSwgJ1RPS0VOX1BSSVZBVEVfS0VZJywgeyBleHBpcmVzSW46ICczMG0nIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIH1jYXRjaHtcclxuICAgICAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KCdJbnZhbGlkIGNyZWRlbnRpYWxzJylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBhcGkge2dldH0gL2NoZWNrX2F1dGggVmVyaWZ5IGFuIGFjY2VzcyB0b2tlbi5cclxuICAgICAqIEBhcGlOYW1lIGNoZWNrXHJcbiAgICAgKiBAYXBpR3JvdXAgQXV0aFxyXG4gICAgICogQGFwaVBhcmFtIHtTdHJpbmd9IGp3dCBUb2tlbiB2YWx1ZS5cclxuICAgICAqIEBhcGlTdWNjZXNzIHtPYmplY3R9IGFjY2Vzc190b2tlbiBHaXZlIHZhbHVlcyBvZiBhY2Nlc3MgdG9rZW4uXHJcbiAgICAgKiBAYXBpRXJyb3IgKDUwMCkgRXJyb3IgV3JvbmcgdG9rZW4uXHJcbiAgICAgKi9cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgY2hlY2tBdXRoKHtyZXF1ZXN0fSl7XHJcbiAgICAgICAgY29uc3QgdG9rZW4gPSByZXF1ZXN0LmhlYWRlcignYXV0aG9yaXphdGlvbicpLnNwbGl0KFwiIFwiKVxyXG4gICAgICAgIHJldHVybiBqd3QudmVyaWZ5KHRva2VuWzFdLCAnVE9LRU5fUFJJVkFURV9LRVknKTtcclxuICAgIH1cclxufVxyXG4iXX0=
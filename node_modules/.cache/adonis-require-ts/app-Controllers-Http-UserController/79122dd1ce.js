"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const CreditCard_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/CreditCard"));
const Address_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Address"));
const Role_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Role"));
const Restorer_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Restorer"));
class UsersController {
    async index({ response }) {
        try {
            const users = await User_1.default.query()
                .preload('role')
                .preload('credit_card')
                .preload('delivery_address_id')
                .preload('payement_address_id')
                .preload('restorer');
            return response.status(200).json({ users });
        }
        catch (err) {
        }
    }
    async getById({ params, response }) {
        try {
            const user = await User_1.default.findOrFail(params.id);
            return response.status(200).json({ user });
        }
        catch (err) {
            return response.json({ err });
        }
    }
    async createClient({ request, response }) {
        try {
            const user = await User_1.default.create({ user_firstname: request.body()['user_firstname'], user_lastname: request.body()['user_lastname'], user_email: request.body()['user_email'], user_password: request.body()['user_password'], user_phone_number: request.body()['user_phone_number'], user_is_supported: request.body()['user_is_supported'], user_support: request.body()['user_support'], user_is_delivery: false });
            if (request.body()['delivery_address_city'] != undefined && request.body()['delivery_address_street'] != undefined && request.body()['delivery_address_postal_code'] != undefined && request.body()['delivery_address_street_number'] != undefined) {
                const delivery_address = await Address_1.default.create({ address_city: request.body()['delivery_address_city'], address_street: request.body()['delivery_address_street'], address_street_number: request.body()['delivery_address_street_number'], address_postal_code: request.body()['delivery_address_postal_code'] });
                await user.related('delivery_address_id').associate(delivery_address);
            }
            if (request.body()['payment_address_city'] != undefined && request.body()['payment_address_street'] != undefined && request.body()['payment_address_postal_code'] != undefined && request.body()['payment_address_street_number'] != undefined) {
                const payment_address = await Address_1.default.create({ address_city: request.body()['payment_address_city'], address_street: request.body()['payment_address_street'], address_street_number: request.body()['payment_address_street_number'], address_postal_code: request.body()['payment_address_postal_code'] });
                await user.related('payement_address_id').associate(payment_address);
            }
            if (request.body()['credit_card_type'] != undefined && request.body()['credit_card_num'] != undefined) {
                const creditcard = await CreditCard_1.default.create({ credit_card_type: request.body()['credit_card_type'], credit_card_num: request.body()['credit_card_num'] });
                await user.related('credit_card').associate(creditcard);
            }
            const role = await Role_1.default.findOrFail(1);
            await user.related('role').associate(role);
            return response.status(201).json({ user });
        }
        catch (err) {
            return response.json({ err });
        }
    }
    async createDelivery({ request, response }) {
        try {
            const user = await User_1.default.create({ user_firstname: request.body()['user_firstname'], user_lastname: request.body()['user_lastname'], user_email: request.body()['user_email'], user_password: request.body()['user_password'], user_phone_number: request.body()['user_phone_number'], user_is_supported: request.body()['user_is_supported'], user_support: request.body()['user_support'], user_is_delivery: true });
            const role = await Role_1.default.findOrFail(2);
            await user.related('role').associate(role);
            return response.status(201).json({ user });
        }
        catch (err) {
            return response.status(500).json({ err });
        }
    }
    async createRestorer({ request, response }) {
        try {
            const user = await User_1.default.create({ user_firstname: request.body()['user_firstname'], user_lastname: request.body()['user_lastname'], user_email: request.body()['user_email'], user_password: request.body()['user_password'], user_phone_number: request.body()['user_phone_number'], user_is_supported: request.body()['user_is_supported'], user_support: request.body()['user_support'], user_is_delivery: false });
            const role = await Role_1.default.findOrFail(3);
            await user.related('role').associate(role);
            const restorer = await Restorer_1.default.create(request.body()['restorer_name']);
            const address = await Address_1.default.create({ address_city: request.body()['restorer_address_city'], address_street: request.body()['restorer_address_street'], address_street_number: request.body()['restorer_address_street_number'], address_postal_code: request.body()['restorer_address_postal_code'] });
            await restorer.related('address').associate(address);
            await user.related('restorer').associate(restorer);
            return response.status(201).json({ user });
        }
        catch (err) {
            return response.status(500).json({ err });
        }
    }
    async update({ request, response, params }) {
        try {
            const user = await User_1.default.findOrFail(params.id);
            if (request.body()['user_support'] !== false && request.body()['user_is_supported'] !== false) {
                user.merge({ user_firstname: request.body()['user_firstname'], user_lastname: request.body()['user_lastname'], user_email: request.body()['user_email'], user_password: request.body()['user_password'], user_phone_number: request.body()['user_phone_number'], user_is_supported: request.body()['user_is_supported'], user_support: request.body()['user_support'] });
                await user.save();
                return response.status(200).json({ user });
            }
            else {
                return response.status(403).json({ message: "once true you can't change your support state" });
            }
        }
        catch (err) {
            return response.status(500).json({ err });
        }
    }
    async delete({ response, params }) {
        try {
            const user = await User_1.default.findOrFail(params.id);
            await user.delete();
            return response.status(200).json({ user });
        }
        catch (err) {
        }
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,
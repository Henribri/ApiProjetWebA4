"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const CreditCard_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/CreditCard"));
const Address_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Address"));
const Role_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Role"));
class UsersController {
    async index({ response }) {
        const users = await User_1.default.query()
            .preload('role')
            .preload('credit_card')
            .preload('delivery_address_id')
            .preload('payement_address_id')
            .preload('restorer');
        return response.json({ users });
    }
    async getById({ params, response }) {
        const user = await User_1.default.findOrFail(params.id);
        return response.json({ user });
    }
    async createClient({ request, response }) {
        const user = await User_1.default.create({ user_firstname: request.body()['user_firstname'], user_lastname: request.body()['user_lastname'], user_email: request.body()['user_email'], user_password: request.body()['user_password'], user_phone_number: request.body()['user_phone_number'], user_is_supported: request.body()['user_is_supported'], user_support: request.body()['user_support'], user_is_delivery: false });
        try {
            if (request.body()['credit_card_id'] != null) {
                const credit_card = await CreditCard_1.default.findOrFail(request.body()['credit_card_id']);
                await user.related('credit_card').associate(credit_card);
            }
            if (request.body()['delivery_address_id'] != null) {
                const delivery_address = await Address_1.default.findOrFail(request.body()['delivery_address_id']);
                await user.related('delivery_address_id').associate(delivery_address);
            }
            if (request.body()['payment_address_id'] != null) {
                const payment_address = await Address_1.default.findOrFail(request.body()['payment_address_id']);
                await user.related('payement_address_id').associate(payment_address);
            }
            const role = await Role_1.default.findOrFail(1);
            await user.related('role').associate(role);
        }
        catch (err) {
            return response.json({ err });
        }
        return response.json({ user });
    }
    async update({ request, response, params }) {
        const user = await User_1.default.findOrFail(params.id);
        user.merge(request.body());
        await user.save();
        return response.json({ user });
    }
    async delete({ response, params }) {
        const user = await User_1.default.findOrFail(params.id);
        await user.delete();
        return response.json({ user });
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlckNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJVc2VyQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGlGQUFrQztBQUNsQyw2RkFBOEM7QUFDOUMsdUZBQXdDO0FBQ3hDLGlGQUFrQztBQUdsQyxNQUFxQixlQUFlO0lBRXpCLEtBQUssQ0FBQyxLQUFLLENBQUUsRUFBQyxRQUFRLEVBQXFCO1FBQzlDLE1BQU0sS0FBSyxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRTthQUMvQixPQUFPLENBQUMsTUFBTSxDQUFDO2FBQ2YsT0FBTyxDQUFDLGFBQWEsQ0FBQzthQUN0QixPQUFPLENBQUMscUJBQXFCLENBQUM7YUFDOUIsT0FBTyxDQUFDLHFCQUFxQixDQUFDO2FBQzlCLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNwQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFFLEVBQUMsTUFBTSxFQUFDLFFBQVEsRUFBcUI7UUFDdkQsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU5QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFFTSxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUUsT0FBTyxFQUFHLFFBQVEsRUFBc0I7UUFDaEUsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLEVBQUMsY0FBYyxFQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFDLGFBQWEsRUFBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUMsVUFBVSxFQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUs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QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuaW1wb3J0IENyZWRpdENhcmQgZnJvbSAnQXBwL01vZGVscy9DcmVkaXRDYXJkJ1xuaW1wb3J0IEFkZHJlc3MgZnJvbSAnQXBwL01vZGVscy9BZGRyZXNzJ1xuaW1wb3J0IFJvbGUgZnJvbSAnQXBwL01vZGVscy9Sb2xlJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJzQ29udHJvbGxlciB7XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5kZXggKHtyZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgVXNlci5xdWVyeSgpXG4gICAgICAgIC5wcmVsb2FkKCdyb2xlJylcbiAgICAgICAgLnByZWxvYWQoJ2NyZWRpdF9jYXJkJylcbiAgICAgICAgLnByZWxvYWQoJ2RlbGl2ZXJ5X2FkZHJlc3NfaWQnKVxuICAgICAgICAucHJlbG9hZCgncGF5ZW1lbnRfYWRkcmVzc19pZCcpXG4gICAgICAgIC5wcmVsb2FkKCdyZXN0b3JlcicpXG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKHt1c2Vyc30pXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldEJ5SWQgKHtwYXJhbXMscmVzcG9uc2V9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT3JGYWlsKHBhcmFtcy5pZCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oe3VzZXJ9KVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjcmVhdGVDbGllbnQoeyByZXF1ZXN0ICwgcmVzcG9uc2UgfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuY3JlYXRlKHt1c2VyX2ZpcnN0bmFtZTpyZXF1ZXN0LmJvZHkoKVsndXNlcl9maXJzdG5hbWUnXSx1c2VyX2xhc3RuYW1lOnJlcXVlc3QuYm9keSgpWyd1c2VyX2xhc3RuYW1lJ10sdXNlcl9lbWFpbDpyZXF1ZXN0LmJvZHkoKVsndXNlcl9lbWFpbCddLHVzZXJfcGFzc3dvcmQ6cmVxdWVzdC5ib2R5KClbJ3VzZXJfcGFzc3dvcmQnXSx1c2VyX3Bob25lX251bWJlcjpyZXF1ZXN0LmJvZHkoKVsndXNlcl9waG9uZV9udW1iZXInXSwgdXNlcl9pc19zdXBwb3J0ZWQ6cmVxdWVzdC5ib2R5KClbJ3VzZXJfaXNfc3VwcG9ydGVkJ10sdXNlcl9zdXBwb3J0OnJlcXVlc3QuYm9keSgpWyd1c2VyX3N1cHBvcnQnXSx1c2VyX2lzX2RlbGl2ZXJ5OmZhbHNlfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5ib2R5KClbJ2NyZWRpdF9jYXJkX2lkJ10hPSBudWxsKXtcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVkaXRfY2FyZCA9IGF3YWl0IENyZWRpdENhcmQuZmluZE9yRmFpbChyZXF1ZXN0LmJvZHkoKVsnY3JlZGl0X2NhcmRfaWQnXSlcbiAgICAgICAgICAgICAgICBhd2FpdCB1c2VyLnJlbGF0ZWQoJ2NyZWRpdF9jYXJkJykuYXNzb2NpYXRlKGNyZWRpdF9jYXJkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3QuYm9keSgpWydkZWxpdmVyeV9hZGRyZXNzX2lkJ10hPSBudWxsKXtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxpdmVyeV9hZGRyZXNzID0gYXdhaXQgQWRkcmVzcy5maW5kT3JGYWlsKHJlcXVlc3QuYm9keSgpWydkZWxpdmVyeV9hZGRyZXNzX2lkJ10pXG4gICAgICAgICAgICAgICAgYXdhaXQgdXNlci5yZWxhdGVkKCdkZWxpdmVyeV9hZGRyZXNzX2lkJykuYXNzb2NpYXRlKGRlbGl2ZXJ5X2FkZHJlc3MpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5ib2R5KClbJ3BheW1lbnRfYWRkcmVzc19pZCddIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bWVudF9hZGRyZXNzID0gYXdhaXQgQWRkcmVzcy5maW5kT3JGYWlsKHJlcXVlc3QuYm9keSgpWydwYXltZW50X2FkZHJlc3NfaWQnXSlcbiAgICAgICAgICAgICAgICBhd2FpdCB1c2VyLnJlbGF0ZWQoJ3BheWVtZW50X2FkZHJlc3NfaWQnKS5hc3NvY2lhdGUocGF5bWVudF9hZGRyZXNzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgcm9sZSA9IGF3YWl0IFJvbGUuZmluZE9yRmFpbCgxKVxuICAgICAgICAgICAgYXdhaXQgdXNlci5yZWxhdGVkKCdyb2xlJykuYXNzb2NpYXRlKHJvbGUpXG5cbiAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbih7ZXJyfSlcbiAgICAgICAgfVxuXG5cblxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbih7dXNlcn0pXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZSAoe3JlcXVlc3QsIHJlc3BvbnNlLCBwYXJhbXN9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT3JGYWlsKHBhcmFtcy5pZCk7XG4gICAgICAgIHVzZXIubWVyZ2UocmVxdWVzdC5ib2R5KCkpO1xuICAgICAgICBhd2FpdCB1c2VyLnNhdmUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oe3VzZXJ9KVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBkZWxldGUoe3Jlc3BvbnNlLCBwYXJhbXN9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT3JGYWlsKHBhcmFtcy5pZCk7XG4gICAgICAgIGF3YWl0IHVzZXIuZGVsZXRlKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oe3VzZXJ9KVxuICAgIH1cblxufVxuIl19
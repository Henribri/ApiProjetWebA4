"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const authConfig = {
    guard: 'api',
    guards: {
        api: {
            driver: 'oat',
            tokenProvider: {
                type: 'api',
                driver: 'database',
                table: 'api_tokens',
                foreignKey: 'user_id',
            },
            provider: {
                driver: 'lucid',
                identifierKey: 'id',
                uids: ['user_email'],
                model: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Models/User'))),
            },
        },
    },
};
exports.default = authConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE1BQU0sVUFBVSxHQUFlO0lBQzdCLEtBQUssRUFBRSxLQUFLO0lBQ1osTUFBTSxFQUFFO1FBY04sR0FBRyxFQUFFO1lBQ0gsTUFBTSxFQUFFLEtBQUs7WUFlYixhQUFhLEVBQUU7Z0JBQ2IsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLEtBQUssRUFBRSxZQUFZO2dCQUNuQixVQUFVLEVBQUUsU0FBUzthQUN0QjtZQUVELFFBQVEsRUFBRTtnQkFTUixNQUFNLEVBQUUsT0FBTztnQkFXZixhQUFhLEVBQUUsSUFBSTtnQkFZbkIsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDO2dCQWVwQixLQUFLLEVBQUUsR0FBRyxFQUFFLHlFQUFRLGlCQUFpQixHQUFDO2FBQ3ZDO1NBQ0Y7S0FDRjtDQUNGLENBQUE7QUFFRCxrQkFBZSxVQUFVLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29uZmlnIHNvdXJjZTogaHR0cHM6Ly9naXQuaW8vSlkwbXBcclxuICpcclxuICogRmVlbCBmcmVlIHRvIGxldCB1cyBrbm93IHZpYSBQUiwgaWYgeW91IGZpbmQgc29tZXRoaW5nIGJyb2tlbiBpbiB0aGlzIGNvbmZpZ1xyXG4gKiBmaWxlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEF1dGhDb25maWcgfSBmcm9tICdAaW9jOkFkb25pcy9BZGRvbnMvQXV0aCdcclxuXHJcbi8qXHJcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG58IEF1dGhlbnRpY2F0aW9uIE1hcHBpbmdcclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnxcclxufCBMaXN0IG9mIGF2YWlsYWJsZSBhdXRoZW50aWNhdGlvbiBtYXBwaW5nLiBZb3UgbXVzdCBmaXJzdCBkZWZpbmUgdGhlbVxyXG58IGluc2lkZSB0aGUgYGNvbnRyYWN0cy9hdXRoLnRzYCBmaWxlIGJlZm9yZSBtZW50aW9uaW5nIHRoZW0gaGVyZS5cclxufFxyXG4qL1xyXG5jb25zdCBhdXRoQ29uZmlnOiBBdXRoQ29uZmlnID0ge1xyXG4gIGd1YXJkOiAnYXBpJyxcclxuICBndWFyZHM6IHtcclxuICAgIC8qXHJcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHwgT0FUIEd1YXJkXHJcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHxcclxuICAgIHwgT0FUIChPcGFxdWUgYWNjZXNzIHRva2VucykgZ3VhcmQgdXNlcyBkYXRhYmFzZSBiYWNrZWQgdG9rZW5zIHRvIGF1dGhlbnRpY2F0ZVxyXG4gICAgfCBIVFRQIHJlcXVlc3QuIFRoaXMgZ3VhcmQgRE9FUyBOT1QgcmVseSBvbiBzZXNzaW9ucyBvciBjb29raWVzIGFuZCB1c2VzXHJcbiAgICB8IEF1dGhvcml6YXRpb24gaGVhZGVyIHZhbHVlIGZvciBhdXRoZW50aWNhdGlvbi5cclxuICAgIHxcclxuICAgIHwgVXNlIHRoaXMgZ3VhcmQgdG8gYXV0aGVudGljYXRlIG1vYmlsZSBhcHBzIG9yIHdlYiBjbGllbnRzIHRoYXQgY2Fubm90IHJlbHlcclxuICAgIHwgb24gY29va2llcy9zZXNzaW9ucy5cclxuICAgIHxcclxuICAgICovXHJcbiAgICBhcGk6IHtcclxuICAgICAgZHJpdmVyOiAnb2F0JyxcclxuXHJcbiAgICAgIC8qXHJcbiAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICB8IFRva2VucyBwcm92aWRlclxyXG4gICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgfFxyXG4gICAgICB8IFVzZXMgU1FMIGRhdGFiYXNlIGZvciBtYW5hZ2luZyB0b2tlbnMuIFVzZSB0aGUgXCJkYXRhYmFzZVwiIGRyaXZlciwgd2hlblxyXG4gICAgICB8IHRva2VucyBhcmUgdGhlIHNlY29uZGFyeSBtb2RlIG9mIGF1dGhlbnRpY2F0aW9uLlxyXG4gICAgICB8IEZvciBleGFtcGxlOiBUaGUgR2l0aHViIHBlcnNvbmFsIHRva2Vuc1xyXG4gICAgICB8XHJcbiAgICAgIHwgVGhlIGZvcmVpZ25LZXkgY29sdW1uIGlzIHVzZWQgdG8gbWFrZSB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIHVzZXJcclxuICAgICAgfCBhbmQgdGhlIHRva2VuLiBZb3UgYXJlIGZyZWUgdG8gdXNlIGFueSBjb2x1bW4gbmFtZSBoZXJlLlxyXG4gICAgICB8XHJcbiAgICAgICovXHJcbiAgICAgIHRva2VuUHJvdmlkZXI6IHtcclxuICAgICAgICB0eXBlOiAnYXBpJyxcclxuICAgICAgICBkcml2ZXI6ICdkYXRhYmFzZScsXHJcbiAgICAgICAgdGFibGU6ICdhcGlfdG9rZW5zJyxcclxuICAgICAgICBmb3JlaWduS2V5OiAndXNlcl9pZCcsXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBwcm92aWRlcjoge1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgfCBEcml2ZXJcclxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICB8XHJcbiAgICAgICAgfCBOYW1lIG9mIHRoZSBkcml2ZXJcclxuICAgICAgICB8XHJcbiAgICAgICAgKi9cclxuICAgICAgICBkcml2ZXI6ICdsdWNpZCcsXHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgfCBJZGVudGlmaWVyIGtleVxyXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIHxcclxuICAgICAgICB8IFRoZSBpZGVudGlmaWVyIGtleSBpcyB0aGUgdW5pcXVlIGtleSBvbiB0aGUgbW9kZWwuIEluIG1vc3QgY2FzZXMgc3BlY2lmeWluZ1xyXG4gICAgICAgIHwgdGhlIHByaW1hcnkga2V5IGlzIHRoZSByaWdodCBjaG9pY2UuXHJcbiAgICAgICAgfFxyXG4gICAgICAgICovXHJcbiAgICAgICAgaWRlbnRpZmllcktleTogJ2lkJyxcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICB8IFVpZHNcclxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICB8XHJcbiAgICAgICAgfCBVaWRzIGFyZSB1c2VkIHRvIHNlYXJjaCBhIHVzZXIgYWdhaW5zdCBvbmUgb2YgdGhlIG1lbnRpb25lZCBjb2x1bW5zLiBEdXJpbmdcclxuICAgICAgICB8IGxvZ2luLCB0aGUgYXV0aCBtb2R1bGUgd2lsbCBzZWFyY2ggdGhlIHVzZXIgbWVudGlvbmVkIHZhbHVlIGFnYWluc3Qgb25lXHJcbiAgICAgICAgfCBvZiB0aGUgbWVudGlvbmVkIGNvbHVtbnMgdG8gZmluZCB0aGVpciB1c2VyIHJlY29yZC5cclxuICAgICAgICB8XHJcbiAgICAgICAgKi9cclxuICAgICAgICB1aWRzOiBbJ3VzZXJfZW1haWwnXSxcclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgfCBNb2RlbFxyXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIHxcclxuICAgICAgICB8IFRoZSBtb2RlbCB0byB1c2UgZm9yIGZldGNoaW5nIG9yIGZpbmRpbmcgdXNlcnMuIFRoZSBtb2RlbCBpcyBpbXBvcnRlZFxyXG4gICAgICAgIHwgbGF6aWx5IHNpbmNlIHRoZSBjb25maWcgZmlsZXMgYXJlIHJlYWQgd2F5IGVhcmxpZXIgaW4gdGhlIGxpZmVjeWNsZVxyXG4gICAgICAgIHwgb2YgYm9vdGluZyB0aGUgYXBwIGFuZCB0aGUgbW9kZWxzIG1heSBub3QgYmUgaW4gYSB1c2FibGUgc3RhdGUgYXRcclxuICAgICAgICB8IHRoYXQgdGltZS5cclxuICAgICAgICB8XHJcbiAgICAgICAgKi9cclxuICAgICAgICBtb2RlbDogKCkgPT4gaW1wb3J0KCdBcHAvTW9kZWxzL1VzZXInKSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSxcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXV0aENvbmZpZ1xyXG4iXX0=
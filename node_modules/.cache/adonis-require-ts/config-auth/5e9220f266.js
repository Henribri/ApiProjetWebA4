"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const authConfig = {
    guard: 'api',
    guards: {
        api: {
            driver: 'oat',
            tokenProvider: {
                type: 'api',
                driver: 'database',
                table: 'api_tokens',
                foreignKey: 'user_id',
            },
            provider: {
                driver: 'lucid',
                identifierKey: 'id',
                uids: ['email'],
                model: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Models/User'))),
            },
        },
    },
};
exports.default = authConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE1BQU0sVUFBVSxHQUFlO0lBQzdCLEtBQUssRUFBRSxLQUFLO0lBQ1osTUFBTSxFQUFFO1FBY04sR0FBRyxFQUFFO1lBQ0gsTUFBTSxFQUFFLEtBQUs7WUFlYixhQUFhLEVBQUU7Z0JBQ2IsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLEtBQUssRUFBRSxZQUFZO2dCQUNuQixVQUFVLEVBQUUsU0FBUzthQUN0QjtZQUVELFFBQVEsRUFBRTtnQkFTUixNQUFNLEVBQUUsT0FBTztnQkFXZixhQUFhLEVBQUUsSUFBSTtnQkFZbkIsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDO2dCQWVmLEtBQUssRUFBRSxHQUFHLEVBQUUseUVBQVEsaUJBQWlCLEdBQUM7YUFDdkM7U0FDRjtLQUNGO0NBQ0YsQ0FBQTtBQUVELGtCQUFlLFVBQVUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb25maWcgc291cmNlOiBodHRwczovL2dpdC5pby9KWTBtcFxyXG4gKlxyXG4gKiBGZWVsIGZyZWUgdG8gbGV0IHVzIGtub3cgdmlhIFBSLCBpZiB5b3UgZmluZCBzb21ldGhpbmcgYnJva2VuIGluIHRoaXMgY29uZmlnXHJcbiAqIGZpbGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQXV0aENvbmZpZyB9IGZyb20gJ0Bpb2M6QWRvbmlzL0FkZG9ucy9BdXRoJ1xyXG5cclxuLypcclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnwgQXV0aGVudGljYXRpb24gTWFwcGluZ1xyXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxufFxyXG58IExpc3Qgb2YgYXZhaWxhYmxlIGF1dGhlbnRpY2F0aW9uIG1hcHBpbmcuIFlvdSBtdXN0IGZpcnN0IGRlZmluZSB0aGVtXHJcbnwgaW5zaWRlIHRoZSBgY29udHJhY3RzL2F1dGgudHNgIGZpbGUgYmVmb3JlIG1lbnRpb25pbmcgdGhlbSBoZXJlLlxyXG58XHJcbiovXHJcbmNvbnN0IGF1dGhDb25maWc6IEF1dGhDb25maWcgPSB7XHJcbiAgZ3VhcmQ6ICdhcGknLFxyXG4gIGd1YXJkczoge1xyXG4gICAgLypcclxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgfCBPQVQgR3VhcmRcclxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgfFxyXG4gICAgfCBPQVQgKE9wYXF1ZSBhY2Nlc3MgdG9rZW5zKSBndWFyZCB1c2VzIGRhdGFiYXNlIGJhY2tlZCB0b2tlbnMgdG8gYXV0aGVudGljYXRlXHJcbiAgICB8IEhUVFAgcmVxdWVzdC4gVGhpcyBndWFyZCBET0VTIE5PVCByZWx5IG9uIHNlc3Npb25zIG9yIGNvb2tpZXMgYW5kIHVzZXNcclxuICAgIHwgQXV0aG9yaXphdGlvbiBoZWFkZXIgdmFsdWUgZm9yIGF1dGhlbnRpY2F0aW9uLlxyXG4gICAgfFxyXG4gICAgfCBVc2UgdGhpcyBndWFyZCB0byBhdXRoZW50aWNhdGUgbW9iaWxlIGFwcHMgb3Igd2ViIGNsaWVudHMgdGhhdCBjYW5ub3QgcmVseVxyXG4gICAgfCBvbiBjb29raWVzL3Nlc3Npb25zLlxyXG4gICAgfFxyXG4gICAgKi9cclxuICAgIGFwaToge1xyXG4gICAgICBkcml2ZXI6ICdvYXQnLFxyXG5cclxuICAgICAgLypcclxuICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgIHwgVG9rZW5zIHByb3ZpZGVyXHJcbiAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICB8XHJcbiAgICAgIHwgVXNlcyBTUUwgZGF0YWJhc2UgZm9yIG1hbmFnaW5nIHRva2Vucy4gVXNlIHRoZSBcImRhdGFiYXNlXCIgZHJpdmVyLCB3aGVuXHJcbiAgICAgIHwgdG9rZW5zIGFyZSB0aGUgc2Vjb25kYXJ5IG1vZGUgb2YgYXV0aGVudGljYXRpb24uXHJcbiAgICAgIHwgRm9yIGV4YW1wbGU6IFRoZSBHaXRodWIgcGVyc29uYWwgdG9rZW5zXHJcbiAgICAgIHxcclxuICAgICAgfCBUaGUgZm9yZWlnbktleSBjb2x1bW4gaXMgdXNlZCB0byBtYWtlIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgdXNlclxyXG4gICAgICB8IGFuZCB0aGUgdG9rZW4uIFlvdSBhcmUgZnJlZSB0byB1c2UgYW55IGNvbHVtbiBuYW1lIGhlcmUuXHJcbiAgICAgIHxcclxuICAgICAgKi9cclxuICAgICAgdG9rZW5Qcm92aWRlcjoge1xyXG4gICAgICAgIHR5cGU6ICdhcGknLFxyXG4gICAgICAgIGRyaXZlcjogJ2RhdGFiYXNlJyxcclxuICAgICAgICB0YWJsZTogJ2FwaV90b2tlbnMnLFxyXG4gICAgICAgIGZvcmVpZ25LZXk6ICd1c2VyX2lkJyxcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHByb3ZpZGVyOiB7XHJcbiAgICAgICAgLypcclxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICB8IERyaXZlclxyXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIHxcclxuICAgICAgICB8IE5hbWUgb2YgdGhlIGRyaXZlclxyXG4gICAgICAgIHxcclxuICAgICAgICAqL1xyXG4gICAgICAgIGRyaXZlcjogJ2x1Y2lkJyxcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICB8IElkZW50aWZpZXIga2V5XHJcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgfFxyXG4gICAgICAgIHwgVGhlIGlkZW50aWZpZXIga2V5IGlzIHRoZSB1bmlxdWUga2V5IG9uIHRoZSBtb2RlbC4gSW4gbW9zdCBjYXNlcyBzcGVjaWZ5aW5nXHJcbiAgICAgICAgfCB0aGUgcHJpbWFyeSBrZXkgaXMgdGhlIHJpZ2h0IGNob2ljZS5cclxuICAgICAgICB8XHJcbiAgICAgICAgKi9cclxuICAgICAgICBpZGVudGlmaWVyS2V5OiAnaWQnLFxyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIHwgVWlkc1xyXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIHxcclxuICAgICAgICB8IFVpZHMgYXJlIHVzZWQgdG8gc2VhcmNoIGEgdXNlciBhZ2FpbnN0IG9uZSBvZiB0aGUgbWVudGlvbmVkIGNvbHVtbnMuIER1cmluZ1xyXG4gICAgICAgIHwgbG9naW4sIHRoZSBhdXRoIG1vZHVsZSB3aWxsIHNlYXJjaCB0aGUgdXNlciBtZW50aW9uZWQgdmFsdWUgYWdhaW5zdCBvbmVcclxuICAgICAgICB8IG9mIHRoZSBtZW50aW9uZWQgY29sdW1ucyB0byBmaW5kIHRoZWlyIHVzZXIgcmVjb3JkLlxyXG4gICAgICAgIHxcclxuICAgICAgICAqL1xyXG4gICAgICAgIHVpZHM6IFsnZW1haWwnXSxcclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgfCBNb2RlbFxyXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIHxcclxuICAgICAgICB8IFRoZSBtb2RlbCB0byB1c2UgZm9yIGZldGNoaW5nIG9yIGZpbmRpbmcgdXNlcnMuIFRoZSBtb2RlbCBpcyBpbXBvcnRlZFxyXG4gICAgICAgIHwgbGF6aWx5IHNpbmNlIHRoZSBjb25maWcgZmlsZXMgYXJlIHJlYWQgd2F5IGVhcmxpZXIgaW4gdGhlIGxpZmVjeWNsZVxyXG4gICAgICAgIHwgb2YgYm9vdGluZyB0aGUgYXBwIGFuZCB0aGUgbW9kZWxzIG1heSBub3QgYmUgaW4gYSB1c2FibGUgc3RhdGUgYXRcclxuICAgICAgICB8IHRoYXQgdGltZS5cclxuICAgICAgICB8XHJcbiAgICAgICAgKi9cclxuICAgICAgICBtb2RlbDogKCkgPT4gaW1wb3J0KCdBcHAvTW9kZWxzL1VzZXInKSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSxcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXV0aENvbmZpZ1xyXG4iXX0=